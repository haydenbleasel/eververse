/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all notes
         * @description Returns detail of all notes order by created_at desc
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively call /notes/ by using returned pageCursor
         *     The pageCursor is valid for 1 minute
         *
         */
        get: operations["getNotes"];
        put?: never;
        /**
         * Create a note
         * @description Creates a new note in Productboard
         *
         *     Whenever the email field is mentioned in the descriptions of this endpoint, it is referring to the field `user.email` or `customer_email` (deprecated)
         *
         */
        post: operations["create_note"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a note
         * @description Returns detail of a specific note.
         */
        get: operations["getNote"];
        put?: never;
        post?: never;
        /**
         * Delete a note
         * @description Deletes a note
         */
        delete: operations["deleteNote"];
        options?: never;
        head?: never;
        /**
         * Update a note
         * @description Updates a note
         */
        patch: operations["updateNote"];
        trace?: never;
    };
    "/notes/{noteId}/user-followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add followers to a note
         * @description Adds many followers to a note using their email addresses. The users must all already exist in Productboard.
         */
        post: operations["bulkAddNoteFollowers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{noteId}/user-followers/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a follower from a note
         * @description Removes a follower from a note using their email.
         */
        delete: operations["removeNoteFollower"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{noteId}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tags
         * @description Returns a list of tags associated with the specified note.
         */
        get: operations["listTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{noteId}/tags/{tagName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a tag
         * @description Adds a tag to a note. If a tag with the given name does not exist, it will be created.
         */
        post: operations["createNoteTag"];
        /**
         * Remove a tag from a note
         * @description Removes a tag from a note.
         */
        delete: operations["deleteNoteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{noteId}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List links
         * @description Returns a list of entities (product, component, feature, or subfeature) associated with a given note.
         */
        get: operations["listLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{noteId}/links/{entityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a link
         * @description Creates a link between the specified note and the specified entity (product, component, feature, or subfeature).
         */
        post: operations["createLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback-form-configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all feedback form configurations
         * @description Returns a list of feedback form configurations.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["listFeedbackFormConfigurations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback-form-configurations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a feedback form configuration
         * @description Returns detail of a specific feedback form configuration.
         */
        get: operations["getFeedbackFormConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback-forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a feedback form
         * @description Submit a feedack form and create underlying note.
         */
        post: operations["submitFeedbackForm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all companies
         * @description Returns detail of all companies
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively call GET /companies by using returned pageOffset
         *
         */
        get: operations["getCompanies"];
        put?: never;
        /**
         * Create a company
         * @description Creates a new company in Productboard
         */
        post: operations["createCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve company
         * @description Returns detail of a specific company.
         */
        get: operations["getCompany"];
        put?: never;
        post?: never;
        /**
         * Delete a company
         * @description Deletes a specific company.
         */
        delete: operations["deleteCompany"];
        options?: never;
        head?: never;
        /**
         * Update a company
         * @description Updates a company
         */
        patch: operations["updateCompany"];
        trace?: never;
    };
    "/companies/custom-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve company fields
         * @description Returns list of company fields. We support just `manual` fields for now.
         */
        get: operations["listCompanyFields"];
        put?: never;
        /**
         * Create a company field
         * @description Creates a new company field
         */
        post: operations["createCompanyField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/custom-fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a company field
         * @description Returns detail of a specific company field.
         */
        get: operations["getCompanyField"];
        put?: never;
        post?: never;
        /**
         * Delete a company field
         * @description Deletes a specific company field.
         */
        delete: operations["deleteCompanyField"];
        options?: never;
        head?: never;
        /**
         * Update a company field
         * @description Updates a specific company field.
         */
        patch: operations["updateCompanyField"];
        trace?: never;
    };
    "/companies/{companyId}/custom-fields/{companyCustomFieldId}/value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve company field value
         * @description Returns detail of a specific company field value.
         */
        get: operations["getCompanyFieldValue"];
        /**
         * Sets company field value
         * @description Sets a company field value
         */
        put: operations["setCompanyFieldValue"];
        post?: never;
        /**
         * Delete company field value
         * @description Deletes a company field value
         */
        delete: operations["deleteCompanyFieldValue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all users
         * @description Returns detail of all users
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getUsers"];
        put?: never;
        /**
         * Create a user
         * @description Creates a new user.
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a user
         * @description Returns detail of a specific user
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description Deletes a specific user.
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        /**
         * Update a user
         * @description Updates a specific user.
         */
        patch: operations["updateUser"];
        trace?: never;
    };
    "/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all features
         * @description Returns detail of all features and subfeatures.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getFeatures"];
        put?: never;
        /**
         * Create a feature
         * @description Creates a new (sub)feature under a specific product, component or feature.
         */
        post: operations["createFeature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a feature
         * @description Returns detail of a specific feature.
         */
        get: operations["getFeature"];
        /**
         * Update a feature
         * @deprecated
         * @description Deprecated, use the PATCH method instead.
         */
        put: operations["updateFeatureDeprecated"];
        post?: never;
        /**
         * Delete a feature
         * @description Deletes a specific feature. The feature with subfeatures cannot be deleted. Delete all subfeatures first.
         */
        delete: operations["deleteFeature"];
        options?: never;
        head?: never;
        /**
         * Update a feature
         * @description Updates a specific feature.
         */
        patch: operations["updateFeature"];
        trace?: never;
    };
    "/features/{id}/links/initiatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List initiatives linked to a specific feature
         * @description Returns a list of initiatives linked to a feature.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link
         *     in the response to fetch the next page.
         *
         */
        get: operations["listLinksToInitiatives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{id}/links/initiatives/{initiativeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between a feature and an initiative */
        post: operations["createInitiativeLink"];
        /** Delete a link between a feature and an initiative */
        delete: operations["deleteInitiativeLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{id}/links/objectives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List objectives linked to a specific feature
         * @description Returns a list of objectives linked to a feature.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link
         *     in the response to fetch the next page.
         *
         */
        get: operations["listLinksToObjectives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{id}/links/objectives/{objectiveId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between a feature and an objective */
        post: operations["createObjectiveLink"];
        /** Delete a link between a feature and an objective */
        delete: operations["deleteObjectiveLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all components
         * @description Returns detail of all components.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getComponents"];
        put?: never;
        /**
         * Create a component
         * @description Creates a new (sub)component under a specific product, or component.
         */
        post: operations["createComponent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/components/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a component
         * @description Returns detail of a specific component.
         */
        get: operations["getComponent"];
        /**
         * Update a component
         * @deprecated
         * @description Deprecated, use the PATCH method instead.
         */
        put: operations["updateComponentDeprecated"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a component
         * @description Updates a specific component.
         */
        patch: operations["updateComponent"];
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all products
         * @description Returns detail of all products.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a product
         * @description Returns detail of a specific product.
         */
        get: operations["getProduct"];
        /**
         * Update a product
         * @deprecated
         * @description Deprecated, use the PATCH method instead.
         */
        put: operations["updateProductDeprecated"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a product
         * @description Updates a specific product.
         */
        patch: operations["updateProduct"];
        trace?: never;
    };
    "/feature-statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all feature statuses
         * @description Returns detail of all feature statuses.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getFeatureStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hierarchy-entities/custom-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all custom fields
         * @description Returns detail of all custom field definitions. This API only returns the data regarding the custom field definition, not the values for hierarchy entities. Values are managed by [Custom Fields Values endpoints](#tag/hierarchyEntitiesCustomFieldsValues).
         *
         *     When listing, the `type` filter has to be specified to allow us to add new types without breaking existing clients. It's possible to specify multiple types in the filter.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getCustomFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hierarchy-entities/custom-fields-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all custom fields' values
         * @description Returns all set (non-empty) custom field values. It can be filtered by
         *     * `type` - returns all custom fields values of given types. Multiple types can be specified.
         *     * `hierarchyEntity.id` - returns all custom fields values for the hierarchy entity (row).
         *     * `customField.id` - returns all custom fields values for the custom field (column).
         *
         *     The filters can be combined. Either `customField.id` or `type` has to be specified to not break existing API consumers when adding a new custom field type.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getCustomFieldsValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hierarchy-entities/custom-fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a custom field
         * @description Returns detail of one custom field.
         *
         */
        get: operations["getCustomField"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hierarchy-entities/custom-fields-values/value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a custom field's value
         * @description Returns a custom field value specified by custom field id and hierarchy entity id.
         *
         */
        get: operations["getCustomFieldValue"];
        /**
         * Set value of a custom field for a given hierarchy entity
         * @description This method can be used for setting custom field value for a hierarchy entity and custom field.
         *
         */
        put: operations["setCustomFieldValue"];
        post?: never;
        /**
         * Delete value of a custom field for a given hierarchy entity
         * @description This method can be used for unsetting (deleting) custom field value for a hierarchy entity and custom field.
         *
         */
        delete: operations["deleteCustomFieldValue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all release groups
         * @description Returns detail of all release groups.
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["listReleaseGroups"];
        put?: never;
        /**
         * Create a release group
         * @description Creates a new release group.
         *
         *     You can create new release groups only if you are on Scale or Enterprise plan and you have *Multiple release groups* enabled.
         *
         */
        post: operations["createReleaseGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release-groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a release group
         * @description Returns detail of a specific release group.
         */
        get: operations["getReleaseGroup"];
        put?: never;
        post?: never;
        /**
         * Delete a release group
         * @description Deletes a specific release group. A release group with releases cannot be deleted. Delete the releases first.
         *
         *     You can delete release groups only if you are on Scale or Enterprise plan and you have *Multiple release groups* enabled.
         *
         */
        delete: operations["deleteReleaseGroup"];
        options?: never;
        head?: never;
        /**
         * Update a release group
         * @description Updates a specific release group.
         *
         *     You can update release groups only if you are on Scale or Enterprise plan and you have *Multiple release groups* enabled.
         *
         */
        patch: operations["updateReleaseGroup"];
        trace?: never;
    };
    "/releases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all releases
         * @description Returns detail of all releases.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["listReleases"];
        put?: never;
        /**
         * Create a release
         * @description Creates a new release.
         */
        post: operations["createRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/releases/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a release
         * @description Returns detail of a specific release.
         */
        get: operations["getRelease"];
        put?: never;
        post?: never;
        /**
         * Delete a release
         * @description Deletes a specific release. A release with feature release assignments cannot be deleted. Delete the feature release assignments first.
         */
        delete: operations["deleteRelease"];
        options?: never;
        head?: never;
        /**
         * Update a release
         * @description Updates a specific release.
         */
        patch: operations["updateRelease"];
        trace?: never;
    };
    "/feature-release-assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all feature release assignments
         * @description Returns list of feature release assignments based on query parameters. These parameters can be used to get features in release or releases for feature. Only "assigned" (existing) feature release assignments are returned i.e. every returned feature release assignment has assigned parameter set to true.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["listFeatureReleaseAssignments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feature-release-assignments/assignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a feature release assignment
         * @description Returns a feature release assignment specified by a given feature and a release. If such assignment does not exists `false` is returned in assigned parameter.
         *
         */
        get: operations["getFeatureReleaseAssignment"];
        /**
         * Update a feature release assignment
         * @description Assigns a feature into a release or removes a feature from a release depending on the assigned parameter.
         *
         *     Take into account that it's possible to achieve use cases that are not possible in the UI. For example you can assign subfeature into a release without its parent feature, but then you won't see it on a roadmap. If needed, assign the parent feature into the release. Subfeatures without a parent feature are not supported on a roadmap right now and might never be.
         *
         */
        put: operations["updateFeatureReleaseAssignment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objectives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objectives
         * @description Returns detail of all objectives.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link
         *     in the response to fetch the next page.
         *
         */
        get: operations["getObjectives"];
        put?: never;
        /**
         * Create a new objective
         * @description Adds a new objective to the collection of objectives.
         */
        post: operations["createObjective"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objectives/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific objective
         * @description Returns detail of a specific objective.
         */
        get: operations["getObjective"];
        put?: never;
        post?: never;
        /**
         * Delete an objective
         * @description Deletes a specific objective from the collection.
         */
        delete: operations["deleteObjective"];
        options?: never;
        head?: never;
        /**
         * Update an existing objective
         * @description Updates the details of an existing objective based on the provided data. Only updates the fields that are provided.
         */
        patch: operations["updateObjective"];
        trace?: never;
    };
    "/objectives/{id}/links/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List features linked to a specific objective
         * @description Returns a list of features that are linked to the objective. |
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         */
        get: operations["listLinksObjectiveToFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objectives/{id}/links/initiatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List initiatives linked to a specific objective
         * @description Returns a list of initiatives that are linked to the objective. |
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         */
        get: operations["listLinksObjectiveToInitiatives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objectives/{id}/links/initiatives/{initiativeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between an objective and an initiative */
        post: operations["createObjectiveToInitiativeLink"];
        /** Delete a link between an objective and an initiative */
        delete: operations["deleteObjectiveToInitiativeLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objectives/{id}/links/features/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between an objective and a feature */
        post: operations["createObjectiveToFeatureLink"];
        /** Delete a link between an objective and a feature */
        delete: operations["deleteObjectiveToFeatureLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/key-results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all key results
         * @description Returns detail of all key results.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link
         *     in the response to fetch the next page.
         *
         */
        get: operations["getKeyResults"];
        put?: never;
        /**
         * Create a key result
         * @description Create a new key result
         */
        post: operations["createKeyResult"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/key-results/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a key result
         * @description Returns detail of a specific key result
         */
        get: operations["getKeyResult"];
        put?: never;
        post?: never;
        /**
         * Delete a key result
         * @description Deletes a specific key result
         */
        delete: operations["deleteKeyResult"];
        options?: never;
        head?: never;
        /**
         * Update a key result
         * @description Updates a specific key result
         */
        patch: operations["updateKeyResult"];
        trace?: never;
    };
    "/initiatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all initiatives
         * @description Returns detail of all initiatives.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link
         *     in the response to fetch the next page.
         *
         */
        get: operations["getInitiatives"];
        put?: never;
        /**
         * Create a new initiative
         * @description Adds a new initiative to the collection of initiatives.
         */
        post: operations["createInitiative"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/initiatives/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific initiative
         * @description Returns detail of a specific initiative.
         */
        get: operations["getInitiative"];
        put?: never;
        post?: never;
        /**
         * Delete an initiative
         * @description Deletes a specific initiative from the collection.
         */
        delete: operations["deleteInitiative"];
        options?: never;
        head?: never;
        /**
         * Update an existing initiative
         * @description Updates the details of an existing initiative based on the provided data. Only updates the fields that are provided.
         */
        patch: operations["updateInitiative"];
        trace?: never;
    };
    "/initiatives/{id}/links/objectives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List objectives linked to a specific initiative
         * @description Returns a list of objectives that are linked to the initiative. |
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         */
        get: operations["listLinksInitiativeToObjectives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/initiatives/{id}/links/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List features linked to a specific initiative
         * @description Returns a list of features that are linked to the initiative. |
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         */
        get: operations["listLinksInitiativeToFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/initiatives/{id}/links/objectives/{objectiveId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between an initiative and an objective */
        post: operations["createInitiativeToObjectiveLink"];
        /** Delete a link between an initiative and an objective */
        delete: operations["deleteInitiativeToObjectiveLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/initiatives/{id}/links/features/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new link between an initiative and a feature */
        post: operations["createInitiativeToFeatureLink"];
        /** Delete a link between an initiative and a feature */
        delete: operations["deleteInitiativeToFeatureLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin-integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all plugin integrations
         * @description Returns detail of all plugin integrations.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getPluginIntegrations"];
        put?: never;
        /**
         * Create a plugin integration
         * @description Creates new Plugin integration. Part of the creation process is a probe request to verify that the referenced service really intends to receive the notifications and that the requests will be able to reach the destination, see the `callback` section below for details.
         *
         */
        post: operations["postPluginIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin-integrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a plugin integration
         * @description Returns detail of a specific plugin integration.
         */
        get: operations["getPluginIntegration"];
        /**
         * Update a plugin integration
         * @deprecated
         * @description Deprecated, use the PATCH method instead.
         */
        put: operations["putPluginIntegration"];
        post?: never;
        /**
         * Delete a plugin integration
         * @description Deletes a specific plugin integration.
         */
        delete: operations["deletePluginIntegration"];
        options?: never;
        head?: never;
        /**
         * Update a plugin integration
         * @description Updates Plugin integration. Fileds that are not set will preserve their current value. If the integration is enabled a probe request is sent to verify that the referenced service really intends to receive the notifications and that the requests will be able to reach the destination.
         *
         */
        patch: operations["patchPluginIntegration"];
        trace?: never;
    };
    "/plugin-integrations/{id}/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all plugin integration connections
         * @description Returns detail of all plugin integration connections, __except__ for those having their `state` set to `initial`. The `initial` state is the default and basically means that the connection does not exist at the moment.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getPluginIntegrationConnections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugin-integrations/{id}/connections/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a plugin integration connection
         * @description Returns detail of a specific plugin integration connection.
         */
        get: operations["getPluginIntegrationConnection"];
        /**
         * Set a plugin integration connection
         * @description Configures a Plugin integration connection, possibly resulting in a change of the corresponding push button. This operation notifies Productboard that the 3rd party system tried (or is still trying, depending on the payload type) to establish a connection between Productboard feature and some entity in the other system. There are currently three possible outcomes of such an attempt:
         *     1. __Connected__: the connection has been established and a push button corresponding to the feature in related Plugin integration should change to represent the connection. This happens when the connection with state `connected` is received in the request body.
         *     2. __Error__: the connection could not be established and a push button corresponding to the feature in related Plugin integration should change to show the error. This happens connection with state `error` is received in the request body.
         *     3. __In progress__: the connection is still being created (possibly asynchronously) and a push button corresponding to the feature in related Plugin integration should display an "in progress" state. This happens when the state `progress` is received in the request body.
         *
         *     There is an additional state a connection can be in which does not directly map to an outcome of a push event, the __Initial__ state. This is the default state for all connections and has the semantics of "a connection does not currently exist for given feature". The _Initial_ state is, however, a fully valid type from the API's perspective and it is thus possible to set a connection to the _Initial_ state using this endpoint. The effect of that is _exactly_ the same as if the [Delete a plugin integration connection](#operation/deletePluginIntegrationConnection) endpoint was called instead.
         *
         *     Note that this is the endpoint to be used when the 3rd party system processes feature push events asynchronously. In that case the flow would be similar to this:
         *     1. A feature is pushed from Productboard
         *     2. The 3rd party schedules a task to be processed asynchronously and returns an "in progress" response. This makes Producboard render an "in progress" state on the corresponding push button.
         *     3. Once the 3rd party finishes processing of the task, this endpoint is called to update the connection (and by extension, the state of said push button) to either a success or a failure.
         *
         */
        put: operations["putPluginIntegrationConnection"];
        post?: never;
        /**
         * Delete a plugin integration connection
         * @description Deletes a specific plugin integration connection. This voids the actual connection between a Productboard feature identified by `featureId` and the 3rd party system, effectively resetting the push button for that feature within correspoding Plugin integration to its initial state.
         *
         */
        delete: operations["deletePluginIntegrationConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jira-integrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Jira integration
         * @description Returns detail of a specific Jira integration.
         */
        get: operations["getJiraIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jira-integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Jira integrations
         * @description Returns detail of all Jira integrations.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getJiraIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jira-integrations/{id}/connections/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Jira integration connection
         * @description Returns detail of a specific Productboard feature - Jira issue connection.
         */
        get: operations["getJiraIntegrationConnection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jira-integrations/{id}/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Jira integration connections
         * @description Returns detail of all Productboard feature - Jira issue connections for given integration. It also allows to find a connection by Jira issue key or ID.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getJiraIntegrationConnections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all subscriptions
         * @description Returns detail of all webhook subscriptions.
         *
         *     This API is paginated, only the first 100 items are returned by default. The client should then recursively follow `links.next` link in the response to fetch the next page.
         *
         */
        get: operations["getWebhooks"];
        put?: never;
        /**
         * Create a new subscription
         * @description Creates a new webhook subscription to be actively notified on each change in the specified entities.
         *
         *     Part of the subscription process is a probe request to verify that the referenced service really intends to receive the webhook notifications and that the requests will be able to reach the destination, see the `callback` section below for details.
         *
         */
        post: operations["postWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a subscription
         * @description Returns detail of a specific webhook subscription.
         */
        get: operations["getWebhook"];
        put?: never;
        post?: never;
        /**
         * Delete a subscription
         * @description Deletes a specific webhook subscription.
         */
        delete: operations["deleteWebhook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Format: date
         * @example 2020-12-03
         */
        Date: string;
        /**
         * Format: uuid
         * @description Entity identifier.
         * @example 00000000-0000-0000-0000-000000000000
         */
        UUID: string;
        /**
         * @description Comma-separated list of tags
         * @example [
         *       "important",
         *       "important,bug"
         *     ]
         */
        Tags: string;
        /**
         * @description Entity title
         * @example Zlack Messaging App
         */
        Title: string;
        /**
         * @description Entity content
         * @example Some content
         */
        Content: string;
        /**
         * @description Entity display url leading to Productboard detail page
         * @example https://pb.productboard.com/all-notes/notes/123
         */
        DisplayUrl: string;
        Company: {
            id: components["schemas"]["UUID"];
        };
        User: {
            id: components["schemas"]["UUID"];
        };
        Owner: {
            email?: string;
            name?: string;
        };
        /**
         * @description Entity state
         * @example processed
         * @enum {string}
         */
        State: "unprocessed" | "processed" | "archived";
        /** @description For entities that originated in external systems and entered Productboard via the API or integrations, the source keeps track of the original source entity in that origin system(s) */
        Source: {
            /**
             * @description A unique string identifying the external system from which the data came
             * @example deskdesk
             */
            origin: string;
            /**
             * @description The unique id of the record in the origin system
             * @example 123
             */
            record_id: string;
        };
        /** @description Feature object */
        Feature: {
            id: components["schemas"]["UUID"];
            /**
             * @description Feature type
             * @example feature
             * @enum {string}
             */
            type?: "subfeature" | "feature" | "component" | "product";
            /**
             * @description Feature's insight value for given User/Company
             * @example 2
             */
            importance?: number;
        };
        /** @description all Features related to a given note (having the insight with importance) */
        Features: components["schemas"]["Feature"][];
        /**
         * Format: date-time
         * @description Timestamp
         * @example 2020-12-30T06:38:36.406002Z
         */
        DateTime: string;
        Note: {
            id: components["schemas"]["UUID"];
            title: components["schemas"]["Title"];
            content: components["schemas"]["Content"];
            displayUrl?: components["schemas"]["DisplayUrl"];
            /** @description URL in an external system where the note originated */
            externalDisplayUrl?: string;
            company?: components["schemas"]["Company"];
            user?: components["schemas"]["User"];
            owner?: components["schemas"]["Owner"];
            /** @description The followers of a note. */
            followers?: {
                memberId?: components["schemas"]["UUID"];
                memberName?: string;
                /** @description Follower email address */
                memberEmail?: string;
                teamId?: components["schemas"]["UUID"];
                teamName?: string;
            }[];
            state?: components["schemas"]["State"];
            source?: components["schemas"]["Source"];
            tags?: components["schemas"]["Tags"];
            features?: components["schemas"]["Features"];
            createdAt?: components["schemas"]["DateTime"];
            updatedAt?: components["schemas"]["DateTime"];
            /** @description The user who created the note. */
            createdBy?: {
                email?: string;
                name?: string;
                uuid?: components["schemas"]["UUID"];
            };
        };
        ApiErrors: {
            /** @example false */
            ok: boolean;
            errors?: {
                source?: string[];
            };
        };
        /**
         * Format: url
         * @description For entities that originated in external systems and entered Productboard via the API or integrations, a url where the external entity can be accessed - displayed as a clickable title in the Productboard UI.
         * @example https://www.example.com/deskdesk/notes/123
         */
        "notes.model_DisplayUrl": string;
        "notes.model_User": {
            /**
             * Format: email
             * @description Email address of a user to be attached to the note. Productboard tries to resolve this email (and possibly external ID, see below) to an existing user entity, creating one if no such user exists.
             *     Also, the domain part of given email address is used to resolve a Company to link the note (and possibly the newly created user) to.
             *
             *     This field can't be combined with neither `customer_email` nor `company.domain`.
             *
             * @example phillip.j.fry@planetexpress.com
             */
            email?: string;
            /**
             * @description This attribute represents a distinct identification associated with a user, assigned through Productboard.
             *
             *     It enables the unique differentiation and recognition of each user within the system.
             *
             *     The following scenarios might trigger conflicts:
             *     + If the provided external ID does not correspond with the current external ID of the user determined by the specified email address.
             *     + If the given email address does not align with the existing email address of the user associated with the specified external ID.
             *
             * @example cf5e7b20-d12a-4c6a-8ce2-128070de5dfc
             */
            external_id?: string;
        };
        /** @description The company to be associated with the note. */
        "notes.model_Company": {
            /**
             * Format: uuid
             * @description The id of the company.
             *
             *     This attribute cannot be combined with the `domain` attribute.
             *
             */
            id?: string;
            /**
             * Format: domain
             * @deprecated
             * @description Domain of a company the note (and possibly a user) should be linked to.
             *
             *     This attribute cannot be combined with the `id` attribute.
             *
             *     This attribute is currently meant exclusively to substitute the default Company domain extraction mechanism (based on the domain part of an email address) when identifying a user via `user.external_id` only.
             *     Therefore, it can't be combined with any email field - in that case the Company domain is extracted automatically from given email address.
             *
             *     The Company resolution mechanism based on `company.domain` works as follows:
             *
             *     - If only `company.domain` is provided that doesn't match any existing Company within Productboard, a new Company is created and the note is linked to that Company.
             *     - If only `company.domain` is provided that matches an existing Company within Productboard, the note is linked to that Company.
             *     - If both `user.external_id` and `company.domain` are provided and the user identified by given external ID is already linked to a Company, then given `company.domain` must match the domain of that Company.
             *     - If both `user.external_id` and `company.domain` are provided and the user identified by given external ID is not linked to a Company and given Company domain matches existing Company in Productboard, then the user is linked to the Company.
             *
             * @example acme.com
             */
            domain?: string;
            /**
             * @deprecated
             * @description This attribute signifies a source record ID for a Company object in PB.
             *
             *     The ID is imported from external tools such as Salesforce, and uniquely identifies the company within the system.
             *
             *     When present, the system first attempts to match a company based on this external_id.
             *     If no match is found, the system continues to search by domain.
             *
             *     This external_id is saved within the Company entity upon its creation or update, provided the existing Company record associated with the given domain does not already contain an external_id.
             *
             * @example X87juix12W
             */
            external_id?: string;
        };
        NoteCreateRequest: {
            /** @example Note title */
            title: string;
            /**
             * @description HTML-encoded rich text supported by certain tags; unsupported tags will be stripped out
             * @example Here is some <b>exciting</b> content
             */
            content: string;
            /**
             * @deprecated
             * @description Use the `user.email` property instead.
             *
             *     Email address of customer to attach to the note - will use an existing customer record if one is found, otherwise will create one with the specified email address within a company with matching domain (if it already exists).
             *
             *     This field can't be combined with neither `company.domain` nor `user.email`.
             *
             * @example deprecated@example.com
             */
            customer_email?: string;
            display_url?: components["schemas"]["notes.model_DisplayUrl"];
            user?: components["schemas"]["notes.model_User"];
            company?: components["schemas"]["notes.model_Company"];
            source?: components["schemas"]["Source"];
            /** @description The user to add as an owner to the note.
             *
             *     Productboard will try to find an existing user with the given email address and add them as an owner to the note. If no user is found, an error will be thrown.
             *      */
            owner?: {
                /**
                 * @description The email of the user to add as an owner
                 * @example owner@example.com
                 */
                email: string;
            };
            /**
             * @description A set of tags for categorizing the note; tag uniqueness is case- and diacritic-insensitive, so Apple, APPLE, and äpple will all end up assigned to the same tag, and the tag displayed will be whichever variant was first (chronologically) entered into Productboard
             * @example [
             *       "3.0",
             *       "important",
             *       "experimental"
             *     ]
             */
            tags?: string[];
        };
        URL: string;
        /** @description Comment object */
        Comment: {
            id?: components["schemas"]["UUID"];
            user_id?: components["schemas"]["UUID"];
            /** @description Author email address */
            email?: string;
            content?: components["schemas"]["Content"];
            timestamp?: components["schemas"]["DateTime"];
        };
        Comments: components["schemas"]["Comment"][];
        ExpandedNote: components["schemas"]["Note"] & {
            comments?: components["schemas"]["Comments"];
        };
        "notes.model_Owner": {
            /**
             * Format: email
             * @description Email address of a user to set as owner of the note.
             *
             *     Productboard tries to resolve this email to an existing user entity, and blows up if no existing user matches this email.
             *
             * @example owner@example.com
             */
            email: string;
        };
        NoteUpdateRequest: {
            /** @example Note title */
            title?: string;
            /**
             * @description A set of tags for categorizing the note; Tags input here will override any existing tags.
             * @example [
             *       "3.0",
             *       "important",
             *       "experimental"
             *     ]
             */
            tags?: string[];
            source?: components["schemas"]["Source"];
            display_url?: components["schemas"]["notes.model_DisplayUrl"];
            user?: components["schemas"]["notes.model_User"];
            company?: components["schemas"]["notes.model_Company"];
            owner?: components["schemas"]["notes.model_Owner"];
            /**
             * @description The content of a note. This can only be updated on notes without existing snippets.
             * @example This is some content
             */
            content?: string;
        };
        FollowerBulkCreateSuccessResponse: {
            links?: {
                /**
                 * @description Note is accessible via this URL in the Productboard application
                 * @example https://space.productboard.com/inbox/notes/123456
                 */
                html?: components["schemas"]["URL"];
            };
            data?: {
                id?: components["schemas"]["UUID"];
            };
        };
        /** @description Errors that occurred. */
        FollowerCreateErrors: {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `user.notFound` - The user does not exist or does not have access to the specified note.
             *      - `follower.alreadyExists` - The user is already following the specified note.
             *      - `follower.notFound` - The user is not following the specified note.
             *      - `request.invalid` - Request payload must be a JSON array of users.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
        }[];
        FollowerBulkCreateErrorResponse: {
            errors?: components["schemas"]["FollowerCreateErrors"];
        };
        /** @description Entity object */
        "common.model_Feature": {
            id: components["schemas"]["UUID"];
            /**
             * @description Entity type
             * @example feature
             * @enum {string}
             */
            type: "subfeature" | "feature" | "component" | "product";
            links: {
                /**
                 * Format: uri
                 * @description Link to entity on the API
                 * @example https://api.productboard.com/product/00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        /** @description all entities associated with a given note (having the insight) */
        "common.model_Features": components["schemas"]["common.model_Feature"][];
        /** @example {
         *       "id": "00000000-0000-0000-0000-000000000000",
         *       "status": "404",
         *       "code": "note.notFound",
         *       "title": "Note not found",
         *       "description": "Note with ID '00000000-0000-0000-0000-000000000000' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        ApiError: {
            /** @description A unique identifier for this particular occurrence of the problem. */
            id: string;
            /** @description The HTTP status code applicable to this problem, expressed as a string value. */
            status: string;
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `note.notFound` - Requested Note could not be found.
             *      - `entity.notFound` - Requested Entity could not be found.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
        };
        "links.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["ApiError"][];
        };
        /**
         * Format: uuid
         * @description Entity identifier.
         * @example 237fec73-bd33-4788-8a21-e6a3b4abdef9
         */
        "common.model_UUID": string;
        /**
         * @description The email of a Productboard user that has access to your workspace.
         * @example email@example.com
         */
        Email: string;
        /**
         * @description The value `[obfuscated]`. Used to hide personally identifiable information in cases the request doesn't have a required OAuth2 scope.
         *
         * @example [
         *       "obfuscated"
         *     ]
         * @enum {string}
         */
        ObfuscatedValue: "[obfuscated]";
        Member: {
            email: components["schemas"]["Email"] | components["schemas"]["ObfuscatedValue"];
        } | null;
        FeedbackFormConfiguration: {
            id: components["schemas"]["common.model_UUID"];
            /** @example Portal Configuration */
            name: string;
            owner?: components["schemas"]["Member"];
            fields: {
                id: components["schemas"]["common.model_UUID"];
                /** @example Your idea */
                name: string;
                /** @enum {string} */
                fieldType: "number" | "text" | "textarea" | "note_title" | "customer" | "importance" | "link_to_entity";
                isRequired: boolean;
            }[];
            createdAt: components["schemas"]["DateTime"];
            updatedAt: components["schemas"]["DateTime"];
        };
        /** @description Link to the next page. */
        NextPageLinks: {
            /**
             * Format: uri
             * @description Link to the next page or `null` if this is the last one.
             * @example https://api.productboard.info/feedback-form-configurations?pageCursor=eyJwYWdlTGltaXQiOjEsInYiOjEsInBhZ2VPZmZzZXQiOjF9
             */
            next?: string | null;
        };
        /** @example {
         *       "id": "ee3cf0df-59e7-47c6-9997-04326ebbad40",
         *       "status": "422",
         *       "code": "field.notFound",
         *       "title": "Feedback form configuration field not found",
         *       "detail": "Feedback Form Configuration Field with ID '4edefba8-fd6f-4b0f-aa1c-2abf5dc0b0e9' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "common.error_ApiError": {
            /** @description A unique identifier for this particular occurrence of the problem. */
            id: string;
            /** @description The HTTP status code applicable to this problem, expressed as a string value. */
            status: string;
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `feedbackFormConfiguration.notFound` - Requested configuration could not be found.
             *      - `field.notFound` - Provided field could not be found.
             *      - `field.required` - Required field is missing.
             *      - `field.duplicate` - Provided field is a duplicate.
             *      - `value.required` - Required field is missing a value.
             *      - `value.unprocessable` - Provided value for a field is unprocessable.
             *      - `user.notFound` - Field value references a user that could not be found.
             *      - `company.notFound` - Field value references a company that could not be found.
             *      - `entity.notFound` - Field value references an entity that could not be found.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
        };
        "common.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["common.error_ApiError"][];
        };
        /**
         * @description Number field value
         * @example 3.14
         */
        NumberValue: number;
        /**
         * @description Short text field value
         * @example Field value
         */
        TextValue: string;
        /**
         * @description Text area field value
         * @example Field value
         */
        TextAreaValue: string;
        /**
         * @description Short text field value
         * @example Field value
         */
        NoteTitleValue: string;
        "feedback-forms.api_User": {
            id: components["schemas"]["common.model_UUID"];
        };
        /** @description The company to be associated with the note. */
        "feedback-forms.api_Company": {
            id: components["schemas"]["common.model_UUID"];
        };
        CustomerValue: {
            user?: components["schemas"]["feedback-forms.api_User"];
            company?: components["schemas"]["feedback-forms.api_Company"];
        };
        /**
         * @description Importance field value
         * @example Field value
         * @enum {number}
         */
        ImportanceValue: 0 | 1 | 2 | 3 | 4;
        /**
         * Format: uuid
         * @description Link to entity field value
         * @example 00000000-0000-0000-0000-000000000001
         */
        LinkToEntityValue: string;
        /** @example https://space.productboard.com/all-notes/notes/38644753 */
        "common.model_URL": string;
        /**
         * @description Entity Name
         * @example Test company
         */
        Name: string;
        /**
         * @description Entity domain
         * @example example.com
         */
        Domain: string;
        /**
         * @description Description of the entity
         * @example This company is a test company
         */
        Description: string;
        /**
         * @description Entity source origin
         * @example csv
         */
        SourceOrigin: string;
        /**
         * @description Entity source record id
         * @example xxx-xxx-xxx-xxx
         */
        SourceRecordId: string;
        "companies.model_Company": {
            id: components["schemas"]["UUID"];
            name?: components["schemas"]["Name"];
            domain?: components["schemas"]["Domain"];
            description?: components["schemas"]["Description"];
            sourceOrigin?: components["schemas"]["SourceOrigin"];
            sourceRecordId?: components["schemas"]["SourceRecordId"];
        };
        /** @description Link to the next page. */
        "common.model_NextPageLinks": {
            /**
             * Format: uri
             * @description Link to the next page or `null` if this is the last one.
             * @example https://api.productboard.com/companies?pageLimit=100&pageOffset=100
             */
            next?: string | null;
        };
        ApiErrorsWithCode: {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *     - `parameter.invalid` - The specified search parameter is not valid.
             *     - `feature.notFound` - Feature with the requested ID cannot be found.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
        };
        /** @description For entities that originated in external systems and entered Productboard via the API or integrations, the source keeps track of the original source entity in that origin system(s) */
        "common.model_Source": {
            /**
             * @description A unique string identifying the external system from which the data came.
             *
             * @example manual
             * @enum {string}
             */
            origin?: "manual" | "csv" | "salesforce";
            /**
             * @description The unique id of the record in the origin system
             * @example 123
             */
            record_id: string;
        };
        CompanyCreateRequest: {
            name: components["schemas"]["Name"];
            domain?: components["schemas"]["Domain"];
            description?: components["schemas"]["Description"];
            source?: components["schemas"]["common.model_Source"];
        };
        CompanyUpdateRequest: {
            name?: components["schemas"]["Name"];
            domain?: components["schemas"]["Domain"];
            description?: components["schemas"]["Description"];
            source?: components["schemas"]["common.model_Source"];
        };
        /** @description Represents Text Company Custom field
         *      */
        TextCustomField: {
            id: components["schemas"]["UUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            name: string;
        };
        /** @description Represents Number Company Custom field
         *      */
        NumberCustomField: {
            id: components["schemas"]["UUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            name: string;
        };
        CompanyField: components["schemas"]["TextCustomField"] | components["schemas"]["NumberCustomField"];
        /** @example {
         *       "code": "companyField.notFound",
         *       "title": "Company Field not found",
         *       "description": "Company Field with ID 'not-a-real-id' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "company-fields.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `name.blank` - Company Field name can't be blank. You have to specify a name in the request.
             *      - `companyField.notFound` - Requested Company Field could not be found.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "company-fields.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["company-fields.error_ApiError"][];
        };
        SelfLink: {
            /**
             * Format: uri
             * @description Link to the resource
             * @example https://api.productboard.com/companies/abb33cf9-55ec-4001-afab-c3ef4814b2b6
             */
            self: string;
        };
        /** @description Represents Text Company Custom field value
         *      */
        TextCustomFieldValue: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            /**
             * @description Value of given company and company custom field
             * @example Field value
             */
            value?: string | null;
        };
        /** @description Represents Number Company Custom field value
         *      */
        NumberCustomFieldValue: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            /**
             * @description Value of given company and company custom field
             * @example 3.14
             */
            value?: number | null;
        };
        CompanyFieldValue: components["schemas"]["TextCustomFieldValue"] | components["schemas"]["NumberCustomFieldValue"];
        /** @example {
         *       "code": "companyFieldValue.notFound",
         *       "title": "Company Field Value not found",
         *       "description": "Company Field Value with ID 'not-a-real-id' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "company-field-values.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `validation.request.body.schema.oneOf` - The parameter  must be one of: eg (text, number)
             *      - `validation.request.body.schema.required` - Object must be filled required property
             *      - `validation.request.body.schema.type` - The parameter must be a string or must be a number
             *      - `validation.request.body.schema.outOfRange` - The parameter is out of allowed range '-9223372036854775808' and '9223372036854775807'
             *      - `companyFieldValue.notFound` - Requested company field value could not be found.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "company-field-values.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["company-field-values.error_ApiError"][];
        };
        /** @description Represents Company Custom field value */
        CompanyCustomFieldValueUpdateRequest: {
            data: components["schemas"]["CompanyFieldValue"];
        };
        /**
         * Format: email
         * @description Email of the User
         * @example phillip.j.fry@planetexpress.org
         */
        "schemas-Email": string | null;
        /**
         * @description The value `[obfuscated]`. Used to hide personally identifiable information in cases the request doesn't have
         *     a required OAuth2 scope.
         *
         * @example [
         *       "obfuscated"
         *     ]
         * @enum {string}
         */
        "schemas-ObfuscatedValue": "[obfuscated]";
        /**
         * @description Name of the User
         * @example Phillip J. Fry
         */
        "schemas-Name": string | null;
        UserResponseProperties: {
            email?: components["schemas"]["schemas-Email"] | components["schemas"]["schemas-ObfuscatedValue"];
            /**
             * @description A unique identifier for the User which is given to Productboard.
             * @example cf5e7b20-d12a-4c6a-8ce2-128070de5dfc
             */
            externalId?: string | null;
            name?: components["schemas"]["schemas-Name"] | components["schemas"]["schemas-ObfuscatedValue"];
        };
        /**
         * Format: uuid
         * @description Entity identifier.
         * @example 00000000-0000-0000-0000-000000000000
         */
        ReadOnlyUUID: string;
        "schemas-User": {
            id: components["schemas"]["ReadOnlyUUID"];
        } & WithRequired<components["schemas"]["UserResponseProperties"], "email" | "externalId" | "name">;
        /** @description Link to the next page. */
        "common.model_NextPageLinks-2": {
            /**
             * Format: uri
             * @description Link to the next page or `null` if this is the last one.
             * @example https://api.productboard.com/entity?pageLimit=100&pageOffset=100
             */
            next?: string | null;
        };
        /** @example {
         *       "code": "validation.openapi.format",
         *       "title": "Validation Error",
         *       "description": "should match format \"email\"",
         *       "source": {
         *         "pointer": "/data/email"
         *       }
         *     } */
        "common.model_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `user.notFound` - Requested user could not be found.
             *      - `externalId.conflict` - Provided externalId is in conflict with externalId of a different user
             *      - `email.conflict` - Provided email is in conflict with email of a different user
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "common.model_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["common.model_ApiError"][];
        };
        UserRequestProperties: {
            /**
             * Format: email
             * @description Email of the User
             * @example phillip.j.fry@planetexpress.org
             */
            email?: string | null;
            /**
             * @description A unique identifier for the User which is given to Productboard.
             * @example cf5e7b20-d12a-4c6a-8ce2-128070de5dfc
             */
            externalId?: string | null;
            /**
             * @description Name of the User
             * @example Phillip J. Fry
             */
            name?: string | null;
        };
        "common.model_SelfLink": {
            /**
             * Format: uri
             * @description Link to the user resource
             * @example https://api.productboard.com/users/abb33cf9-55ec-4001-afab-c3ef4814b2b6
             */
            self: string;
        };
        UserUpdateRequest: components["schemas"]["UserRequestProperties"];
        /**
         * @description Entity name
         * @example Zlack Messaging App
         */
        "common.model_Name": string;
        /**
         * @description Entity description in a limited subset of HTML as defined by [this XML schema](https://developer.productboard.com/page/schema).
         * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
         */
        HTMLDescription: string;
        /** @description Parent of this entity. */
        ParentEntity: {
            id: components["schemas"]["UUID"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the parent entity on the API
                 * @example https://api.productboard.com/features/00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        /** @description Parent feature of this entity. */
        FeatureParent: {
            feature: components["schemas"]["ParentEntity"];
        };
        /** @description Parent component of this entity. */
        ComponentParent: {
            component: components["schemas"]["ParentEntity"];
        };
        /** @description Parent product of this entity. */
        ProductParent: {
            product: components["schemas"]["ParentEntity"];
        };
        /**
         * Format: date
         * @description Local date without time component
         * @example 2020-12-30
         */
        "common.model_Date": string;
        /**
         * @description Constant expressing an unset value
         * @example none
         * @enum {string}
         */
        None: "none";
        /**
         * @description Granularity of the timeframe. Narrows down the start and end dates to the granularity chosen i.e. June, Q3, or 2022.
         * @example year
         * @enum {string}
         */
        TimeframeGranularity: "month" | "quarter" | "year";
        /**
         * @description The email of a Productboard user that has access to your workspace.
         * @example email@example.com
         */
        "common.model_Email": string;
        "common.model_Member": {
            email: components["schemas"]["common.model_Email"] | components["schemas"]["ObfuscatedValue"];
        } | null;
        /** @description Health update of an entity */
        HealthUpdate: {
            /**
             * @description Health status
             * @example on-track
             * @enum {string}
             */
            status: "on-track" | "off-track" | "needs-attention";
            /**
             * @description A message providing a context for the health update status. It is written in a limited subset of HTML as defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p>Everything is fine</p>
             */
            message: string;
            createdAt: components["schemas"]["DateTime"];
        } | null;
        "features.model_Feature": {
            id: components["schemas"]["UUID"];
            name: components["schemas"]["common.model_Name"];
            description: components["schemas"]["HTMLDescription"];
            /**
             * @description Feature type.
             * @example feature
             * @enum {string}
             */
            type: "feature" | "subfeature";
            /**
             * @description A flag denoting if the feature is archived
             * @example false
             */
            archived: boolean;
            /** @description Basic feature status. Please query feature statuses API for more details. */
            status: {
                id: components["schemas"]["UUID"];
                /**
                 * @description Human readable representation of the status.
                 * @example In Progress
                 */
                name: string;
            };
            /** @description Parent of the feature. Can be either a feature, a component or a product. Exactly one of these has to be present. */
            parent: components["schemas"]["FeatureParent"] | components["schemas"]["ComponentParent"] | components["schemas"]["ProductParent"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the feature on the API
                 * @example https://api.productboard.com/features/00000000-0000-0000-0000-000000000000
                 */
                self: string;
                /**
                 * Format: uri
                 * @description Link to the feature in Productboard application.
                 * @example https://space.productboard.com/feature-board/planning/features/00000000-0000-0000-0000-000000000000
                 */
                html: string;
            };
            /** @description Feature timeframe. */
            timeframe: {
                /**
                 * @description Start of the timeframe. "none" means the value is not set.
                 * @example 2021-01-01
                 */
                startDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value is not set.
                 * @example 2021-03-31
                 */
                endDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description Timeframe granularity. Narrows down possible values for start and end dates. "none" means the value is not set.
                 * @example quarter
                 */
                granularity: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            };
            owner: components["schemas"]["common.model_Member"];
            createdAt: components["schemas"]["DateTime"];
            updatedAt: components["schemas"]["DateTime"];
            lastHealthUpdate: components["schemas"]["HealthUpdate"];
        };
        /** @example {
         *       "code": "feature.notFound",
         *       "title": "Feature not found",
         *       "description": "Feature with ID '307348a6-b37f-4de9-b395-e5c750833770' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "hierarchy-entities.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `feature.notFound` - Requested feature could not be found.
             *      - `feature.deletionForbidden.isParent` - Requested feature could not be deleted since it has subfeatures.
             *      - `feature.limitExceeded` - It's not possible to create new features via API in this space, you reached the limit.
             *      - `product.notFound` - Requested product could not be found.
             *      - `component.notFound` - Requested component could not be found.
             *      - `parent.notFound` - Entity specified as a parent could not be found.
             *      - `parent.invalid` - Specified entity (e.g. subfeature) can not be a parent of another entity in feature hierarchy.
             *      - `parent.invalidHierarchy` - Specified entity can not be a parent of another entity in feature hierarchy as it violates one of the constraints:
             *        - Feature's parent can not be of type subfeature.
             *        - Updated feature can not have any subfeatures, if parent is of type feature.
             *        - Updated feature can not be a parent of itself in a hierarchy tree.
             *      - `featureStatus.notFound` - Requested feature status could not be found.
             *      - `featureStatus.name.ambiguous` - Feature status could not be updated to a status with given name since the name is not unique, i.e. there is more than one status of that name. You can either specify the new status using its ID or make the names unique.
             *      - `featureStatus.idAndNameSpecified` - Feature status could not be updated since both ID and name was specified. It's possible to specify only one of them.
             *      - `featureStatus.notSpecified` - Feature status could not be updated since it was not specified. You can either skip status update entirely by not setting the `status` field or you have to specify `id` or `name`.
             *      - `type.invalid` - The selected entity cannot be a parent of the entity being created/updated. (e.g. A component cannot be a parent of a subfeature.)
             *      - `startDate.invalidValue` - Start date has invalid value. The timeframe must adhere to the timeframe granularity, if set.
             *      - `startDate.isMissing` - Start date is missing.
             *      - `startDate.invalidFormat` - Start date has invalid format.
             *      - `timeframeGranularity.invalidValue` - Timeframe granularity has invalid value.
             *      - `member.notFound` - Specified member is not a valid member in requested space.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "hierarchy-entities.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["hierarchy-entities.error_ApiError"][];
        };
        FeatureIdWrapper: {
            /** @description The parent feature id. */
            feature: {
                id: components["schemas"]["UUID"];
            };
        };
        ComponentIdWrapper: {
            /** @description The parent component id. */
            component: {
                id: components["schemas"]["UUID"];
            };
        };
        ProductIdWrapper: {
            /** @description The parent product id. */
            product: {
                id: components["schemas"]["UUID"];
            };
        };
        FeatureCreationRequest: {
            /**
             * @description The feature name. It cannot be an empty string.
             * @example Custom branding
             */
            name: string;
            /**
             * @description The feature description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description: string;
            /**
             * @description Feature type.
             * @example feature
             * @enum {string}
             */
            type: "feature" | "subfeature";
            /** @description Feature status. You cannot provide both `status.id` and `status.name` simultaneously. Only one of them can be used at a time. */
            status: {
                /**
                 * Format: uuid
                 * @description Status ID. This can be obtained using the [Feature statuses API](https://developer.productboard.com/reference/getfeaturestatuses).
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                id?: string | null;
                /**
                 * @description The status name for the unique status to be set. Note that the operation will fail if there are multiple statuses with the same name in your Productboard workspace. Click [here](https://support.productboard.com/hc/en-us/articles/360058171114-Customize-status-values-for-features) for more information about feature statuses and how to change them.
                 * @example In Progress
                 */
                name?: string | null;
            };
            /** @description Parent of the feature. Must be a feature, a component or a product. If you are creating a subfeature, the parent must be a feature. However, if you are creating a feature the parent can either be a component or a product. */
            parent: {
                [key: string]: unknown;
            } & (components["schemas"]["FeatureIdWrapper"] | components["schemas"]["ComponentIdWrapper"] | components["schemas"]["ProductIdWrapper"]);
            /**
             * @description A flag denoting if the feature is archived. If null, it will default to `false`.
             * @example false
             */
            archived?: boolean | null;
            /** @description Feature timeframe. If null, the timeframe will not be set. */
            timeframe?: {
                /**
                 * @description Start of the timeframe. "none" means the value will not be set.
                 * @example 2021-01-01
                 */
                startDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value will not be set.
                 * @example 2021-03-31
                 */
                endDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description The timeframe granularity narrows down the values for start and end dates to the granularity specified since Productboard's timeframe field can be set to a specific day, month, quarter, or year. <br><br>For example, if you would like a feature with a start date of January and an end date of April, you could assign `granularity` to "month", `startDate` to "2021-01-01", and `endDate` to "2021-05-31". If you would like the timeframe to only be set to specific days, then you can remove the granularity property or set it to "none".<br><br>Note that Productboard defaults Q1 to start in January, but this can be changed in your workspace settings. So if you are setting a quarter granualrity, it must adhere to your quarterly schedule.
                 * @example quarter
                 */
                granularity?: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            } | null;
            owner?: components["schemas"]["common.model_Member"];
        };
        /**
         * @description Constant expressing an unset value
         * @example none
         * @enum {string|null}
         */
        NullableNone: "none" | null;
        FeatureUpdateRequestDeprecated: {
            /**
             * @description New feature name or `null` if it should not be changed. Note that empty string `""` is allowed and actually means to set the name to an empty value as opposed to `null`.
             * @example Custom branding
             */
            name?: string | null;
            /**
             * @description New feature description or `null` if it should not be changed. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description?: string | null;
            /**
             * @description Feature archived flag value or `null` if it should not be changed.
             * @example true
             */
            archived?: boolean | null;
            /** @description New feature status or `null` if it should not be changed. It is not possible to specify both ID and name, only one of them can be used. */
            status?: {
                /**
                 * Format: uuid
                 * @description Status id.
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                id?: string | null;
                /**
                 * @description Status name uniquely identifying the status to be set. Note that the operation will fail if the status name is not unique, i.e. there are multiple statuses of this name.
                 * @example In Progress
                 */
                name?: string | null;
            };
            /** @description Feature timeframe. */
            timeframe?: {
                /**
                 * @description Start of the timeframe. "none" means the value should be unset.
                 * @example 2021-01-01
                 */
                startDate?: components["schemas"]["common.model_Date"] | components["schemas"]["NullableNone"];
                /**
                 * @description End of the timeframe. "none" means the value should be unset.
                 * @example 2021-03-31
                 */
                endDate?: components["schemas"]["common.model_Date"] | components["schemas"]["NullableNone"];
            } | null;
            /** @description New parent of the feature or `null` if it should not be changed. */
            parent?: (components["schemas"]["FeatureIdWrapper"] | components["schemas"]["ComponentIdWrapper"] | components["schemas"]["ProductIdWrapper"]) | null;
        };
        /** @description The new owner of the hierarchy entity. If the field is set to `null`, the owner will be unassigned. If the field is not specified in the request, the value will remain unchanged. */
        MemberUpdateRequest: {
            /**
             * @description The email of Productboard user that has access to your workspace.
             * @example email@example.com
             */
            email: string;
        } | null;
        FeatureUpdateRequest: {
            /**
             * @description New feature name or missing if it should not be changed.
             * @example Custom branding
             */
            name?: string;
            /**
             * @description New feature description or missing if it should not be changed. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description?: string;
            /**
             * @description Feature archived flag value or missing if it should not be changed.
             * @example true
             */
            archived?: boolean;
            /** @description New feature status or missing if it should not be changed. It is not possible to specify both ID and name, only one of them can be used. */
            status?: {
                /**
                 * Format: uuid
                 * @description Status ID.
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                id?: string;
                /**
                 * @description Status name uniquely identifying the status to be set. Note that the operation will fail if the status name is not unique, i.e. there are multiple statuses of this name.
                 * @example In Progress
                 */
                name?: string;
            };
            /** @description Feature timeframe. */
            timeframe?: {
                /**
                 * @description Start of the timeframe. "none" means the value should be unset.
                 * @example 2021-01-01
                 */
                startDate?: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value should be unset.
                 * @example 2021-03-31
                 */
                endDate?: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description Timeframe granularity. Narrows down possible values for start and end dates. "none" means the value should be unset. When you specify value other than "none" in the update request, you need to also specify `startDate` and `endDate`.
                 * @example quarter
                 */
                granularity?: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            };
            /** @description New parent of the feature or missing if it should not be changed. */
            parent?: components["schemas"]["FeatureIdWrapper"] | components["schemas"]["ComponentIdWrapper"] | components["schemas"]["ProductIdWrapper"];
            owner?: components["schemas"]["MemberUpdateRequest"];
        };
        InitiativeSelfLinks: {
            /**
             * Format: uri
             * @description Link to the initiative in the Productboard API.
             * @example https://api.productboard.com/initiatives/00000000-0000-0000-0000-000000000000
             */
            self: string;
            /**
             * Format: uri
             * @description Link to the initiative in the Productboard application.
             * @example https://space.productboard.com/data/initiatives?d=XDSDAEWPFU
             */
            html: string;
        };
        InitiativeLink: {
            id: components["schemas"]["UUID"];
            links: components["schemas"]["InitiativeSelfLinks"];
        };
        /** @description Links to other pages of data. */
        PageLinks: {
            /**
             * Format: uri
             * @description Link to the next page or `null` if this is the last one.
             * @example https://api.productboard.com/entity?pageLimit=100&pageCursor=MTAw
             */
            next?: string | null;
        };
        /** @example {
         *       "code": "keyResult.notFound",
         *       "title": "Key result not found.",
         *       "description": "Key result with ID '307348a6-b37f-4de9-b395-e5c750833770' could not be found. Either it doesn't exist or you don't have permissions to\naccess it.\n"
         *     } */
        "features-links.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `objective.notFound` - Requested objective could not be found.
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document. */
                pointer?: string;
            };
        };
        "features-links.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["features-links.error_ApiError"][];
        };
        Component: {
            id: components["schemas"]["UUID"];
            name: components["schemas"]["common.model_Name"];
            description: components["schemas"]["HTMLDescription"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the component on the API
                 * @example https://api.productboard.com/components/00000000-0000-0000-0000-000000000000
                 */
                self: string;
                /**
                 * Format: uri
                 * @description Link to the component in Productboard application.
                 * @example https://space.productboard.com/feature-board/planning/features/00000000-0000-0000-0000-000000000000
                 */
                html: string;
            };
            /** @description Parent of the component. Can be either a component or a product. Exactly one of these has to be present. */
            parent: components["schemas"]["ComponentParent"] | components["schemas"]["ProductParent"];
            owner: components["schemas"]["common.model_Member"];
            createdAt: components["schemas"]["DateTime"];
            updatedAt: components["schemas"]["DateTime"];
        };
        ComponentCreationRequest: {
            /**
             * @description New component name. It cannot be empty string.
             * @example Custom branding
             */
            name: string;
            /**
             * @description The component description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description: string;
            /** @description Parent of the component. Can be either a component or a product. Exactly one of these has to be present. */
            parent: components["schemas"]["ComponentIdWrapper"] | components["schemas"]["ProductIdWrapper"];
            owner?: components["schemas"]["common.model_Member"];
        };
        ComponentUpdateRequestDeprecated: {
            /**
             * @description New component name or `null` if it should not be changed. Note that empty string `""` is allowed and actually means to set the name to an empty value as opposed to `null`.
             * @example Custom branding
             */
            name?: string | null;
            /**
             * @description The component description or `null` if it should not be changed. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description?: string | null;
        };
        ComponentUpdateRequest: {
            /**
             * @description New component name. If the field is not specified in the request, the value will remain unchanged.
             * @example Custom branding
             */
            name?: string;
            /**
             * @description The component description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used. If the field is not specified in the request, the value will remain unchanged.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description?: string;
            /** @description New parent of the component. If the field is not specified in the request, the value will remain unchanged. */
            parent?: components["schemas"]["ComponentIdWrapper"] | components["schemas"]["ProductIdWrapper"];
            owner?: components["schemas"]["MemberUpdateRequest"];
        };
        Product: {
            id: components["schemas"]["UUID"];
            name: components["schemas"]["common.model_Name"];
            description: components["schemas"]["HTMLDescription"];
            owner: components["schemas"]["common.model_Member"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the product on the API
                 * @example https://api.productboard.com/products/00000000-0000-0000-0000-000000000000
                 */
                self: string;
                /**
                 * Format: uri
                 * @description Link to the product in Productboard application.
                 * @example https://space.productboard.com/feature-board/planning/features/00000000-0000-0000-0000-000000000000
                 */
                html: string;
            };
            createdAt: components["schemas"]["DateTime"];
            updatedAt: components["schemas"]["DateTime"];
        };
        ProductUpdateRequest: {
            /**
             * @description New product name. If the field is not specified in the request, the value will remain unchanged.
             * @example Custom branding
             */
            name?: string | null;
            /**
             * @description New product description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema). Check out the [Rich Text section](https://developer.productboard.com/reference/rich-text-formatting) for more information on what tags can be used. If the field is not specified in the request, the value will remain unchanged.
             * @example <p>Custom <s>branding</s> for the agent and user portals.</p>
             */
            description?: string | null;
            owner?: components["schemas"]["MemberUpdateRequest"];
        };
        /** @description Feature status. */
        FeatureStatus: {
            id: components["schemas"]["UUID"];
            /**
             * @description Human readable representation of the status.
             * @example In Progress
             */
            name: string;
            /**
             * @description Indicates whether feature with this status is completed.
             * @example true
             */
            completed: boolean;
        };
        /**
         * @description Name of the custom field
         *
         * @example My Field
         */
        FieldName: string;
        /**
         * @description Custom field description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
         *
         * @example <p>Custom <s>field</s> for the owning team.</p>
         */
        FieldDescription: string;
        "custom-fields.model_SelfLink": {
            /**
             * Format: uri
             * @description Link to the custom field resource
             * @example https://api.productboard.com/hierarchy-entities/custom-fields/fdd377b4-8d72-11ec-b909-0242ac120002
             */
            self: string;
        };
        /** @description Represents Text Custom field
         *      */
        "custom-fields.model_TextCustomField": {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        /** @description Represents Description Custom field
         *      */
        LongTextCustomField: {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "custom-description";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        /** @description Represents Number Custom field
         *      */
        "custom-fields.model_NumberCustomField": {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        /** @description Represents Dropdown Custom field
         *      */
        DropdownCustomField: {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "dropdown";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            /** @description Possible dropdown values. */
            options: {
                id: components["schemas"]["ReadOnlyUUID"];
                label: string;
            }[];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        /** @description Represents Multi Dropdown Custom field
         *      */
        MultiDropdownCustomField: {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "multi-dropdown";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            /** @description Possible multi dropdown values. */
            options: {
                id: components["schemas"]["ReadOnlyUUID"];
                label: string;
            }[];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        /** @description Represents Project Member Custom field
         *      */
        MemberCustomField: {
            id: components["schemas"]["ReadOnlyUUID"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "member";
            name: components["schemas"]["FieldName"];
            description: components["schemas"]["FieldDescription"];
            links: components["schemas"]["custom-fields.model_SelfLink"];
        };
        CustomField: components["schemas"]["custom-fields.model_TextCustomField"] | components["schemas"]["LongTextCustomField"] | components["schemas"]["custom-fields.model_NumberCustomField"] | components["schemas"]["DropdownCustomField"] | components["schemas"]["MultiDropdownCustomField"] | components["schemas"]["MemberCustomField"];
        /** @example {
         *       "code": "dropdownOption.invalid",
         *       "title": "Invalid dropdown option",
         *       "description": "Unknown dropdown option",
         *       "source": {
         *         "parameter": "value"
         *       }
         *     } */
        "hierarchy-entity-custom-fields.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `hierarchyEntity.notFound` - Requested hierarchy entity could not be found.
             *      - `customField.notFound` - Requested custom field could not be found.
             *      - `type.mismatch` - Specified custom field type and value type do not match.
             *      - `customFieldsValues.filter.invalid` - Either customField.id or at least one custom field type must be specified via query parameters.
             *      - `dropdownOption.invalid` - Specified dropdown option is not a valid option for this custom field.
             *      - `member.notFound` - Specified member is not a valid member in requested space.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "hierarchy-entity-custom-fields.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["hierarchy-entity-custom-fields.error_ApiError"][];
        };
        "custom-fields-values.model_CustomField": {
            id: components["schemas"]["ReadOnlyUUID"];
        };
        HierarchyEntity: {
            id: components["schemas"]["ReadOnlyUUID"];
            /** @enum {string} */
            type: "feature" | "component" | "product";
        };
        "custom-fields-values.model_SelfLink": {
            /**
             * Format: uri
             * @description Link to the custom field resource
             * @example https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=abb33cf9-55ec-4001-afab-c3ef4814b2b6&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f
             */
            self: string;
        };
        /** @description Represents Text Custom field value */
        "custom-fields-values.model_TextCustomFieldValue": {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "text";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            /**
             * @description Value of given custom field for given feature
             * @example Field value
             */
            value: string | null;
        };
        /** @description Represents Description Custom field value */
        LongTextCustomFieldValue: {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "custom-description";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            /**
             * @description Value of given custom field for given feature
             * @example Field value
             */
            value: string | null;
        };
        "custom-fields-values.model_NumberCustomFieldValue": {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "number";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            /**
             * @description Value of given custom field for given feature
             * @example 3.14
             */
            value: number | null;
        };
        DropdownOptionValue: {
            id: components["schemas"]["UUID"];
            label: string;
        } | null;
        DropdownCustomFieldValue: {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "dropdown";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            value: components["schemas"]["DropdownOptionValue"];
        };
        MultiDropdownCustomFieldValue: {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "multi-dropdown";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            value: components["schemas"]["DropdownOptionValue"][] | null;
        };
        MemberCustomFieldValue: {
            customField: components["schemas"]["custom-fields-values.model_CustomField"];
            hierarchyEntity: components["schemas"]["HierarchyEntity"];
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "member";
            links: components["schemas"]["custom-fields-values.model_SelfLink"];
            value: components["schemas"]["common.model_Member"];
        };
        CustomFieldValue: components["schemas"]["custom-fields-values.model_TextCustomFieldValue"] | components["schemas"]["LongTextCustomFieldValue"] | components["schemas"]["custom-fields-values.model_NumberCustomFieldValue"] | components["schemas"]["DropdownCustomFieldValue"] | components["schemas"]["MultiDropdownCustomFieldValue"] | components["schemas"]["MemberCustomFieldValue"];
        /** @description Represents Text Custom field value */
        TextCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "text";
            links?: components["schemas"]["custom-fields-values.model_SelfLink"];
            /**
             * @description Value of given custom field for given feature
             * @example Field value
             */
            value: string;
        };
        /** @description Represents Description Custom field value */
        LongTextCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "custom-description";
            links?: components["schemas"]["custom-fields-values.model_SelfLink"];
            /**
             * @description Value of given custom field for given feature. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example Field value
             */
            value: string;
        };
        NumberCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "number";
            /**
             * @description Value of given custom field for given feature
             * @example 3.14
             */
            value: number;
        };
        /** @description Represents a reference to an existing dropdown option. The properties are mutually exclusive, either `id` or `label` must be provided. If the option is not found, whole update will fail. */
        DropdownOptionRequest: {
            id?: components["schemas"]["UUID"];
            label?: string | null;
        } | null;
        DropdownCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "dropdown";
            value: components["schemas"]["DropdownOptionRequest"];
        };
        /** @description Updates a multiple options dropdown custom field value replacing all selected items with the new ones. When any of the selected items is not available in the custom field options, all update will fail. */
        MultiDropdownCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "multi-dropdown";
            value: components["schemas"]["DropdownOptionRequest"][];
        };
        MemberCustomFieldValueUpdateRequest: {
            /**
             * @description Custom field type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "member";
            value: {
                /**
                 * @description Email of a member. Member is a Productboard user that has access to a space.
                 * @example email@example.com
                 */
                email: string;
            };
        };
        CustomFieldValueUpdateRequest: components["schemas"]["TextCustomFieldValueUpdateRequest"] | components["schemas"]["LongTextCustomFieldValueUpdateRequest"] | components["schemas"]["NumberCustomFieldValueUpdateRequest"] | components["schemas"]["DropdownCustomFieldValueUpdateRequest"] | components["schemas"]["MultiDropdownCustomFieldValueUpdateRequest"] | components["schemas"]["MemberCustomFieldValueUpdateRequest"];
        ReleaseGroup: {
            id: components["schemas"]["UUID"];
            /**
             * @description New release group name. It cannot be empty string.
             * @example My team releases
             */
            name: components["schemas"]["common.model_Name"];
            /**
             * @description Release group description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p><s>Release group</s> for my team</p>
             */
            description: components["schemas"]["HTMLDescription"];
            /**
             * @description A flag denoting if the release group is archived
             * @example false
             */
            archived: boolean;
            links: {
                /**
                 * Format: uri
                 * @description Link to the release group on the API
                 * @example https://api.productboard.com/release-groups/00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        /** @example {
         *       "code": "releaseGroup.notFound",
         *       "title": "Release group not found",
         *       "description": "Release group with ID '4edefba8-fd6f-4b0f-aa1c-2abf5dc0b0e9' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "releases.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `releaseGroup.notFound` - Requested release group could not be found.
             *      - `release.notFound` - Requested release could not be found.
             *      - `feature.notFound` - Requested feature could not be found.
             *      - `name.conflict` - Provided name is in conflict with different name. There is already an object with the same name and another one cannot be created.
             *      - `releaseGroup.deletionForbidden.hasReleases` - Requested release group could not be deleted since it has releases.
             *      - `release.deletionForbidden.hasAssignments` - Requested release could not be deleted since it has feature release assignments.
             *      - `startDate.invalidValue` - Start date has invalid value. The timeframe must adhere to the timeframe granularity, if set.
             *      - `startDate.isMissing` - Start date is missing.
             *      - `startDate.invalidFormat` - Start date has invalid format.
             *      - `timeframeGranularity.invalidValue` - Timeframe granularity has invalid value.
             *      - `planUpgrade.required` - The current plan on space does not allow access to this endpoint.
             *      - `releaseGroups.disabled` - The *Multiple release groups* option in *Settings* is disabled for your Productboard space.
             *      - `releaseGroup.notAssociated` - The product of the feature you are assigning is not associated with the release group of the release you are assigning to.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "releases.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["releases.error_ApiError"][];
        };
        ReleaseGroupCreationRequest: {
            /**
             * @description New release group name. It cannot be empty string.
             * @example My team releases
             */
            name: string;
            /**
             * @description Release group description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p><s>Release group</s> for my team</p>
             */
            description: string;
        };
        ReleaseGroupUpdateRequest: {
            /**
             * @description New release group name or missing if it should not be changed.
             * @example My team releases
             */
            name?: string;
            /**
             * @description New release group description or missing if it should not be changed. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p><s>Release group</s> for my team</p>
             */
            description?: string;
            /**
             * @description Archived flag value or missing if it should not be changed.
             * @example false
             */
            archived?: boolean;
        };
        Release: {
            id: components["schemas"]["UUID"];
            /**
             * @description New release name. It cannot be empty string.
             * @example R123
             */
            name: components["schemas"]["common.model_Name"];
            /**
             * @description Release description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p>Release <s>R123</s></p>
             */
            description: components["schemas"]["HTMLDescription"];
            /**
             * @description A flag denoting if the release is archived.
             * @example false
             */
            archived: boolean;
            releaseGroup: {
                id: components["schemas"]["UUID"];
                links: {
                    /**
                     * Format: uri
                     * @description Link to the release group on the API
                     * @example https://api.productboard.com/release-groups/00000000-0000-0000-0000-000000000000
                     */
                    self: string;
                };
            };
            /** @description Release timeframe. */
            timeframe: {
                /**
                 * @description Start of the timeframe. "none" means the value is not set.
                 * @example 2021-01-01
                 */
                startDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value is not set.
                 * @example 2021-03-31
                 */
                endDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description Timeframe granularity. Narrows down possible values for start and end dates. "none" means the value is not set.
                 * @example quarter
                 */
                granularity: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            };
            /** @enum {string} */
            state: "upcoming" | "in-progress" | "completed";
            links: {
                /**
                 * Format: uri
                 * @description Link to the release on the API
                 * @example https://api.productboard.com/releases/00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        ReleaseCreationRequest: {
            /**
             * @description New release name. It cannot be empty string.
             * @example R123
             */
            name: string;
            /**
             * @description Release description. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p>Release <s>R123</s></p>
             */
            description: string;
            /** @description If you are on Pro plan or you have disabled *Multiple release groups* option then your releases are still created under a default release group. You can get this release group by listing all release groups through API. Please, provide here the ID of this default release group. */
            releaseGroup: {
                id: components["schemas"]["UUID"];
            };
            /** @description Feature timeframe. */
            timeframe?: {
                /**
                 * @description Start of the timeframe. "none" means the value is not set.
                 * @example 2021-01-01
                 */
                startDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value is not set.
                 * @example 2021-03-31
                 */
                endDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description Timeframe granularity. Narrows down possible values for start and end dates. "none" means the value is not set.
                 * @example quarter
                 */
                granularity?: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            } | null;
            /**
             * @description Release state
             * @default upcoming
             * @enum {string|null}
             */
            state: "upcoming" | "in-progress" | "completed" | null;
        };
        ReleaseUpdateRequest: {
            /**
             * @description New release name or missing if it should not be changed.
             * @example R123
             */
            name?: string;
            /**
             * @description New release description or missing if it should not be changed. The format is a limited subset of HTML defined by [this XML schema](https://developer.productboard.com/page/schema).
             * @example <p>Release <s>R123</s></p>
             */
            description?: string;
            /**
             * @description Archived flag value or missing if it should not be changed.
             * @example false
             */
            archived?: boolean | null;
            /** @description New release group or missing if it should not be changed. */
            releaseGroup?: {
                id: components["schemas"]["UUID"];
            };
            /** @description Release timeframe. */
            timeframe?: {
                /**
                 * @description Start of the timeframe. "none" means the value is not set.
                 * @example 2021-01-01
                 */
                startDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description End of the timeframe. "none" means the value is not set.
                 * @example 2021-03-31
                 */
                endDate: components["schemas"]["common.model_Date"] | components["schemas"]["None"];
                /**
                 * @description Timeframe granularity. Narrows down possible values for start and end dates. "none" means the value is not set. When you specify value other than "none" in the update request, you need to also specify `startDate` and `endDate`.
                 * @example quarter
                 */
                granularity?: components["schemas"]["TimeframeGranularity"] | components["schemas"]["None"];
            } | null;
            /**
             * @description New release state or missing if it should not be changed.
             * @enum {string}
             */
            state?: "upcoming" | "in-progress" | "completed";
        };
        FeatureReleaseAssignment: {
            feature: {
                id: components["schemas"]["UUID"];
                links: {
                    /**
                     * Format: uri
                     * @description Link to the feature on the API
                     * @example https://api.productboard.com/features/00000000-0000-0000-0000-000000000000
                     */
                    self: string;
                };
            };
            release: {
                id: components["schemas"]["UUID"];
                links: {
                    /**
                     * Format: uri
                     * @description Link to the release on the API
                     * @example https://api.productboard.com/releases/00000000-0000-0000-0000-000000000000
                     */
                    self: string;
                };
            };
            /**
             * @description Indicates if feature release assignment exists. `true` when the feature is assigned into the release, `false` otherwise.
             * @example true
             */
            assigned: boolean;
            links: {
                /**
                 * Format: uri
                 * @description Link to the feature release assignment on the API
                 * @example https://api.productboard.com/release-assignments/assignment?release.id=00000000-0000-0000-0000-000000000000&feature.id=00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        FeatureReleaseAssignmentUpdateRequest: {
            /**
             * @description Set to `true` when you want to assign the feature into the release. Set to `false` when you want to remove the feature from the release.
             * @example true
             */
            assigned: boolean;
        };
        /**
         * @description Entity description in a limited subset of HTML as defined by [this XML schema](https://developer.productboard.com/page/schema).
         * @example <p>Increase the number of <i>active users</i> by 10%.</p>
         */
        "common.model_HTMLDescription": string;
        /** @description Parent objective of this entity. */
        ParentObjective: {
            id: components["schemas"]["UUID"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the parent objective.
                 * @example https://api.productboard.com/objectives/00000000-0000-0000-0000-000000000000
                 */
                self: string;
                /**
                 * Format: uri
                 * @description Link to the parent objective in Productboard application.
                 * @example https://space.productboard.com/objectives-board/objectives/0000/detail
                 */
                html?: string;
            };
        };
        /** @description The user owning the entity. */
        "common.model_Owner": {
            email?: string;
        };
        Timeframe: {
            /**
             * Format: date
             * @description The start date of the timeframe.
             */
            startDate?: string;
            /**
             * Format: date
             * @description The end date of the timeframe.
             */
            endDate?: string;
            /**
             * @description The granularity of the timeframe.
             * @enum {string}
             */
            granularity?: "year" | "quarter" | "month" | "day";
        };
        /** @description Objective's status. */
        Status: {
            id: components["schemas"]["UUID"];
            /** @description Status label. */
            name: string;
        };
        /**
         * Format: date-time
         * @description Timestamp (date and time).
         * @example 2020-12-30T06:38:36.406002Z
         */
        "common.model_DateTime": string;
        SelfLinks: {
            /**
             * Format: uri
             * @description Link to the entity in the Productboard API.
             * @example https://api.productboard.com/objectives/00000000-0000-0000-0000-000000000000
             */
            self: string;
            /**
             * Format: uri
             * @description Link to the entity in the Productboard application.
             * @example https://space.productboard.com/data/objectives?d=XDSDAEWPFU
             */
            html: string;
        };
        Objective: {
            id: components["schemas"]["UUID"];
            /** @description Objective name. */
            name: string;
            description: components["schemas"]["common.model_HTMLDescription"];
            /**
             * Format: int32
             * @description Objective's level number. null means that level is not assigned (objective is not assigned to Objectives board).
             */
            level: number | null;
            parent: components["schemas"]["ParentObjective"];
            owner: components["schemas"]["common.model_Owner"];
            timeframe: components["schemas"]["Timeframe"];
            /**
             * @description Objective's state.
             * @enum {string}
             */
            state: "upcoming" | "in-progress" | "completed";
            status?: components["schemas"]["Status"];
            /**
             * @description A flag denoting if the objective is archived.
             * @example false
             */
            archived: boolean;
            createdAt: components["schemas"]["common.model_DateTime"];
            updatedAt: components["schemas"]["common.model_DateTime"];
            links: components["schemas"]["SelfLinks"];
        };
        /** @example {
         *       "code": "keyResult.notFound",
         *       "title": "Key result not found.",
         *       "description": "Key result with ID '307348a6-b37f-4de9-b395-e5c750833770' could not be found. Either it doesn't exist or you don't have permissions to\naccess it.\n"
         *     } */
        "common.error_ApiError-2": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `objective.notFound` - Requested objective could not be found.
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document. */
                pointer?: string;
            };
        };
        "common.error_ApiErrors-2": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["common.error_ApiError-2"][];
        };
        /** @description The parent entity. */
        Parent: {
            /** Format: UUID */
            id?: string;
        };
        StatusById: {
            id: components["schemas"]["UUID"];
        };
        StatusByName: {
            /**
             * @description Name of the status.
             * @example In Progress
             */
            name: string;
        };
        ObjectiveCreateRequest: {
            /** @description Name of the objective */
            name: string;
            description?: components["schemas"]["common.model_HTMLDescription"];
            owner?: components["schemas"]["common.model_Owner"];
            parent?: components["schemas"]["Parent"];
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            timeframe?: components["schemas"]["Timeframe"];
        };
        ObjectiveUpdateRequest: {
            /** @description Name of the objective */
            name?: string;
            description?: components["schemas"]["common.model_HTMLDescription"];
            owner?: components["schemas"]["common.model_Owner"];
            parent?: components["schemas"]["Parent"];
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            timeframe?: components["schemas"]["Timeframe"];
            archived?: boolean;
        };
        EntityLink: {
            id: components["schemas"]["UUID"];
            links: components["schemas"]["SelfLinks"];
        };
        /**
         * @description Email of a member. Member is a Productboard user that has access to a space.
         * @example email@example.com
         */
        "common.model_Email-2": string;
        /**
         * @description The value `[obfuscated]`. Hides personally identifiable information in case the request doesn't have required OAuth2 scope.
         * @example [obfuscated]
         * @enum {string}
         */
        "common.model_ObfuscatedValue": "[obfuscated]";
        "common.model_Member-2": {
            email: components["schemas"]["common.model_Email-2"] | components["schemas"]["common.model_ObfuscatedValue"];
        };
        Progress: {
            /**
             * Format: float
             * @description Start value of the key result.
             * @example 0
             */
            startValue?: number | null;
            /**
             * Format: float
             * @description Target value of the key result.
             * @example 9000
             */
            targetValue?: number | null;
            /**
             * Format: float
             * @description Current value of the key result.
             * @example 9001
             */
            currentValue?: number | null;
            /**
             * Format: float
             * @description Progress percentage of the key result.
             * @example 100
             */
            readonly progress?: number | null;
        };
        KeyResult: {
            id: components["schemas"]["UUID"];
            /** @description Key result name. */
            name: string;
            description: components["schemas"]["common.model_HTMLDescription"];
            owner: components["schemas"]["common.model_Member-2"];
            parent: components["schemas"]["ParentObjective"];
            status: components["schemas"]["Status"];
            progress: components["schemas"]["Progress"];
            timeframe: components["schemas"]["Timeframe"];
            /** @description Whether the key result is archived or not. */
            archived: boolean;
            createdAt: components["schemas"]["common.model_DateTime"];
            updatedAt: components["schemas"]["common.model_DateTime"];
            links: components["schemas"]["SelfLinks"];
        };
        KeyResultCreationRequest: {
            /**
             * @description Name of the new key result.
             * @example Increase revenue by 10%
             */
            name: string;
            /**
             * @description Description of the the key result.
             * @example <p>Increase revenue by 10%</p>
             */
            description?: components["schemas"]["common.model_HTMLDescription"];
            /** @description Owner of the new key result. */
            owner?: {
                email: components["schemas"]["common.model_Email-2"];
            };
            parent: components["schemas"]["Parent"];
            /** @description Status of the new key result. */
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            /** @description Progress of the new key result. */
            progress?: components["schemas"]["Progress"];
            /** @description Timeframe of the new key result. */
            timeframe?: components["schemas"]["Timeframe"];
        };
        KeyResultUpdateRequest: {
            /**
             * @description New name of the key result.
             * @example Increase revenue by 10%
             */
            name?: string;
            /**
             * @description New description of the key result.
             * @example <p>Increase revenue by 10%</p>
             */
            description?: components["schemas"]["common.model_HTMLDescription"];
            /** @description New owner of the key result. */
            owner?: {
                email: components["schemas"]["common.model_Email-2"];
            };
            parent?: components["schemas"]["Parent"];
            /** @description New status of the key result. */
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            /** @description Updated progress of a key result */
            progress?: components["schemas"]["Progress"];
            timeframe?: components["schemas"]["Timeframe"];
            /**
             * @description Whether the key result should be archived or not.
             * @example false
             */
            archived?: boolean;
        };
        Initiative: {
            id: components["schemas"]["UUID"];
            /** @description Initiative name. */
            name: string;
            description: components["schemas"]["common.model_HTMLDescription"];
            owner: components["schemas"]["common.model_Owner"];
            timeframe: components["schemas"]["Timeframe"];
            status?: components["schemas"]["Status"];
            /**
             * @description A flag denoting if the initiative is archived.
             * @example false
             */
            archived: boolean;
            createdAt: components["schemas"]["common.model_DateTime"];
            updatedAt: components["schemas"]["common.model_DateTime"];
            links: components["schemas"]["SelfLinks"];
        };
        InitiativeCreateRequest: {
            /** @description Name of the initiative */
            name: string;
            description?: components["schemas"]["common.model_HTMLDescription"];
            owner?: components["schemas"]["common.model_Owner"];
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            timeframe?: components["schemas"]["Timeframe"];
        };
        InitiativeUpdateRequest: {
            /** @description Name of the initiative */
            name?: string;
            description?: components["schemas"]["common.model_HTMLDescription"];
            owner?: components["schemas"]["common.model_Owner"];
            status?: components["schemas"]["StatusById"] | components["schemas"]["StatusByName"];
            timeframe?: components["schemas"]["Timeframe"];
            archived?: boolean;
        };
        /**
         * @description Status of the integration column in the Productboard UI.
         * @example enabled
         * @enum {string}
         */
        PluginIntegrationStatus: "enabled" | "disabled";
        /**
         * @description Type of the integration. Prefer your reversed Internet domain name to prefix the type, it should make all types unique and prevent conflicts. Integrations from the same partner should use the same prefix. The type is used for enhancing the UI experience. Integrations of given type can have the same icon, section in the Productboard settings etc. **TODO: Configuration mechanism for integration types is not specified yet.**
         *
         * @example com.mydomain.myservice
         */
        PluginIntegrationDescription: string;
        /**
         * @description Name of the integration. It will be visible as column name on Features board and in the settings.
         * @example My great integration
         */
        PluginIntegrationName: string;
        /** @description Default status of the cell on the Feature board before the feature has been connected with the third-party system. Allows customization of the Push button.
         *      */
        InitialState: {
            /**
             * @description Push button label
             * @example Push
             */
            label: string;
        };
        /** @description Plugin integration data. */
        PluginIntegrationResponse: {
            id: components["schemas"]["ReadOnlyUUID"];
            createdAt: components["schemas"]["DateTime"];
            integrationStatus: components["schemas"]["PluginIntegrationStatus"];
            type: components["schemas"]["PluginIntegrationDescription"];
            name: components["schemas"]["PluginIntegrationName"];
            initialState: components["schemas"]["InitialState"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the the Plugin integration
                 * @example https://api.productboard.com/plugin-integrations/00000000-0000-0000-0000-000000000000
                 */
                self: string;
            };
        };
        /** @example {
         *       "code": "pluginIntegration.notFound",
         *       "title": "Plugin Integration not found",
         *       "description": "Plugin Integration ID '8509eb65-09c2-4f42-9d6a-89d7ce6471de' could not be found. It either doesn't exist or you don't have permission to access it."
         *     } */
        "plugin-integrations.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `pluginIntegration.notFound` - Requested plugin integration could not be found.
             *      - `pluginIntegration.connection.notFound` - Plugin integration Connection not found.
             *      - `callback.invalidUrl` - Given URL for receiving callbacks (such as webhooks or plugin integration "push" events) is either not a syntactically valid URL or it cannot be used as a callback receiver.
             *      - `callback.probeFailed` - Callback probe failed. Callback receiver either doesn't have the specified contract implemented or it is not accessible on network level.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "plugin-integrations.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["plugin-integrations.error_ApiError"][];
        };
        /** @description Headers to be sent with each outgoing request from Productboard to a 3rd party system. */
        HttpHeaders: {
            /**
             * @description Raw encoded value to be sent in the `Authorization` header. See the [CallbackAuthorizationHeader](https://developer.productboard.com/reference/authentication#callbackauthorizationheader) for more details.
             *
             * @example MyAuthToken123456
             */
            authorization?: string | null;
        } | null;
        /** @description Definition of the action to be performed when a user clicks on a button in Productboard UI.
         *      */
        Action: {
            /**
             * Format: uri
             * @description Target URL to be called when a button is clicked. The URL has to be publicly accessible, its scheme must be
             *     `https` to communicate over an encrypted channel, certificate has to be valid and it has to be signed by a
             *     public authority.
             *
             *     Hint: You can encode any additional information to the path or query parameters, they are fully under your control.
             *
             * @example https://example.destination.com/connect
             */
            url: string;
            /**
             * @description Version of the action payload structure to be used when notifing about push
             * @enum {integer}
             */
            version: 1;
            headers?: components["schemas"]["HttpHeaders"];
        };
        /** @description Plugin integration data. */
        PluginIntegrationCreate: {
            integrationStatus?: components["schemas"]["PluginIntegrationStatus"];
            type: components["schemas"]["PluginIntegrationDescription"];
            name: components["schemas"]["PluginIntegrationName"];
            initialState: components["schemas"]["InitialState"];
            action: components["schemas"]["Action"];
        };
        /**
         * Format: uri
         * @description Link to the the connection
         * @example https://api.productboard.com/plugin-integrations/00000000-0000-0000-0000-000000000000/connections/00000000-0000-0000-0000-000000000000
         */
        ConnectionLink: string;
        /** @description Data to be sent when user clicks on an integration button.
         *      */
        ActionPayload: {
            integrationId: components["schemas"]["UUID"];
            /**
             * @description Button that initiated the action
             * @example button.push
             * @enum {string}
             */
            trigger: "button.push" | "button.unlink" | "button.dismiss";
            /** @description Data about the feature related to the clicked button. */
            feature: {
                id: components["schemas"]["UUID"];
                links: {
                    /**
                     * Format: uri
                     * @description Link to the feature API
                     * @example https://api.productboard.com/features/00000000-0000-0000-0000-000000000000
                     */
                    self: string;
                    /**
                     * Format: uri
                     * @description Link to the feature in Productboard UI
                     * @example https://space.productboard.com/feature-board/1300746-planning/features/1886736/detail
                     */
                    html: string;
                };
            };
            /** @description User that triggered the operation */
            triggeredByUser?: {
                /**
                 * @description Name of the user that triggered the opearation
                 * @example John Doe
                 */
                name: string;
                /**
                 * Format: email
                 * @description Email of the user that triggered the opearation
                 * @example john.doe@example.org
                 */
                email: string;
            };
            links?: {
                connection: components["schemas"]["ConnectionLink"];
            };
        };
        /** @description Represents an actual Plugin integration connection. This value is understood as a successful result of an operation creating a connection between Productboard feature and an entity in the 3rd party system.
         *      */
        Connected: {
            /**
             * @description Connection state discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            state: "connected";
            /**
             * @description Text to display on the push button. Typical use case is current state of the entity in the 3rd party system.
             *
             * @example In progress
             */
            label: string;
            /**
             * @description Text to display on the push button upon hovering over it. This temporarily replaces the value specified in `label` if the mouse pointer hovers over the button. This can be used e.g. to easily remind the user what entity the feature is connected to.
             *
             * @example Issue 123
             */
            hoverLabel: string;
            /**
             * @description Text to display in a tooltip above the push button. The tooltip shows when the user hovers on the push button and stays for a while. This is ideal for longer, more detailed description of the connected entity.
             *
             * @example Issue 123 - Implement XYZ
             */
            tooltip: string;
            /**
             * @description The color to change the push button background to.
             * @example blue
             * @enum {string}
             */
            color: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "purple";
            /**
             * Format: uri
             * @description An URL to point the user to the connected entity in the other system upon clicking the push button.
             *
             */
            targetUrl: string;
        };
        /** @description Represents an error state of a particular push button. This value is understood as an unsuccessful result of an operation that was supposed to create a connection between Producboard feature and a 3rd party system.
         *      */
        Error: {
            /**
             * @description Connection state discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            state: "error";
            /**
             * @description An error message explaning why the connection could not be established.
             * @example You don't have permission to create XYZ.
             */
            message: string;
            /**
             * @description If the push fails on Productboard side, this field will contain error details. The value is not visible in the UI, it can be used only by developer while debugging new integration.
             * @example JSON decoding error - targetUrl missing
             */
            readonly debugDetail?: string;
        };
        /** @description Represents an "in progress" state of a particular push button. This value is understood as an intermediate result of an operation that is still creating a connection between Producboard feature and a 3rd party system. This is a temporary state and it is expected that the 3rd party system will eventually either successfuly create a connection or report and error.
         *      */
        "plugin-integration-connections.model_Progress": {
            /**
             * @description Connection state discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            state: "progress";
        };
        /** @description Represents an "initial" state of a particular push button. This value is understood as the default state in which no connection for given feature exists.
         *      */
        Initial: {
            /**
             * @description Connection state discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            state: "initial";
        };
        PluginIntegrationConnectionState: components["schemas"]["Connected"] | components["schemas"]["Error"] | components["schemas"]["plugin-integration-connections.model_Progress"] | components["schemas"]["Initial"];
        /** @description Plugin integration connection data. */
        PluginIntegrationConnection: {
            connection: components["schemas"]["PluginIntegrationConnectionState"];
        };
        /** @description Plugin integration data to be updated. Fields that are not set will preserve their current value. */
        PluginIntegrationUpdate: {
            integrationStatus?: components["schemas"]["PluginIntegrationStatus"];
            name?: components["schemas"]["PluginIntegrationName"];
            initialState?: components["schemas"]["InitialState"];
            action?: components["schemas"]["Action"];
        };
        /** @description Plugin integration connection data. */
        PluginIntegrationConnectionResponse: {
            featureId: components["schemas"]["UUID"];
            connection: components["schemas"]["PluginIntegrationConnectionState"];
            links: {
                self: components["schemas"]["ConnectionLink"];
            };
        };
        /**
         * @description Status of the integration column in the Productboard UI.
         * @example enabled
         * @enum {string}
         */
        JiraIntegrationStatus: "enabled" | "disabled";
        /**
         * @description Name of the integration.
         * @example My great integration
         */
        JiraIntegrationName: string;
        /** @description Jira integration data. */
        JiraIntegrationResponse: {
            id: components["schemas"]["ReadOnlyUUID"];
            createdAt: components["schemas"]["DateTime"];
            integrationStatus: components["schemas"]["JiraIntegrationStatus"];
            name: components["schemas"]["JiraIntegrationName"];
            links: {
                /**
                 * Format: uri
                 * @description Link to the Jira integration
                 * @example https://api.productboard.com/jira-integrations/00000000-0000-0000-0000-000000000000
                 */
                self: string;
                /**
                 * Format: uri
                 * @description Link to the list of Jira integration connections
                 * @example https://api.productboard.com/jira-integrations/00000000-0000-0000-0000-000000000000/connections
                 */
                connections: string;
            };
        };
        /** @example {
         *       "code": "jiraIntegration.notFound",
         *       "title": "Jira Integration was not found",
         *       "description": "Jira Integration ID 'b8bfb8c1-667b-48aa-82c1-e5ec3c4bbae4' could not be found."
         *     } */
        "common.model_ApiError-2": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `jiraIntegration.notFound` - Jira integration can not be found
             *      - `jiraConnection.notFound` - Productboard feature - Jira issue connection not found
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "common.model_ApiErrors-2": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["common.model_ApiError-2"][];
        };
        /**
         * Format: uri
         * @description Link to the the connection
         * @example https://api.productboard.com/jira-integrations/00000000-0000-0000-0000-000000000000/connections/00000000-0000-0000-0000-000000000000
         */
        "jira-integration-connections.model_ConnectionLink": string;
        /** @description Jira integration connection data. */
        JiraIntegrationConnectionResponse: {
            featureId: components["schemas"]["UUID"];
            /** @description Represents a link between a Productboard feature and a Jira issue.
             *      */
            connection: {
                /**
                 * @description Jira issue KEY
                 * @example JIRA-123
                 */
                issueKey: string;
                /**
                 * @description Jira issue ID
                 * @example 123456
                 */
                issueId: string;
            };
            links: {
                self: components["schemas"]["jira-integration-connections.model_ConnectionLink"];
            };
        };
        /**
         * @description Describes type of an event that can trigger a webhook notification:
         *      - `component.created`- triggered whenever a component is created
         *      - `component.updated` - triggered whenever a component is updated
         *      - `feature.created` - triggered whenever a feature is created (This includes conversion from a component.)
         *      - `feature.updated` - triggered whenever a feature is updated
         *      - `feature.deleted` - triggered whenever a feature is deleted (This includes conversion to a component.)
         *      - `feature-release-assignment.updated` - triggered whenever a feature release assignment is updated (a feature is added to a release, a feature is removed from a release). The event of this type doesn't have id set, just target link.
         *      - `hierarchy-entity.custom-field-value.updated` - triggered whenever a custom field value for hierarchy entity is updated (This includes unsetting the value). The event of this type doesn't have id set, just target link.
         *      - `note.created` - triggered whenever a note is created
         *      - `note.updated` - triggered whenever a note is updated
         *      - `note.deleted` - triggered whenever a note is deleted
         *      - `insight.created` - triggered whenever a insight is created
         *      - `insight.deleted` - triggered whenever a feature is deleted
         *      - `product.created` - triggered whenever a product is created
         *      - `product.updated` - triggered whenever a product is updated
         *      - `release.created` - triggered whenever a release is created
         *      - `release.updated` - triggered whenever a release is updated
         *      - `release.deleted` - triggered whenever a release is deleted
         *      - `key-result.created` - triggered whenever a key result is created
         *      - `key-result.updated` - triggered whenever a key result is updated
         *      - `key-result.deleted` - triggered whenever a key result is deleted
         *      - `objective.created` - triggered whenever an objective is created
         *      - `objective.updated` - triggered whenever an objective is updated
         *      - `objective.deleted` - triggered whenever an objective is deleted
         *      - `initiative.created` - triggered whenever an initiative is created
         *      - `initiative.updated` - triggered whenever an initiative is updated
         *      - `initiative.deleted` - triggered whenever an initiative is deleted
         *
         * @enum {string}
         */
        WebhookEventType: "component.created" | "component.updated" | "feature.created" | "feature.updated" | "feature.deleted" | "feature-release-assignment.updated" | "hierarchy-entity.custom-field-value.updated" | "note.created" | "note.updated" | "note.deleted" | "product.created" | "product.updated" | "release.created" | "release.updated" | "release.deleted" | "feature-release-assignment.updated" | "note.created" | "note.updated" | "note.deleted" | "insight.created" | "insight.deleted" | "key-result.created" | "key-result.updated" | "key-result.deleted" | "objective.created" | "objective.updated" | "objective.deleted" | "initiative.created" | "initiative.updated" | "initiative.deleted";
        WebhookEvent: {
            eventType: components["schemas"]["WebhookEventType"];
        };
        WebhookSubscription: {
            id: components["schemas"]["UUID"];
            createdAt: components["schemas"]["DateTime"];
            /**
             * @description Human-readable label for this webhook subscription, i.e. just anything that can help you to identify it easily.
             * @example Feature changes webhook
             */
            name: string;
            /** @description Event types triggerring this webhook. */
            events: components["schemas"]["WebhookEvent"][];
        };
        /** @example {
         *       "code": "callback.probeFailed",
         *       "title": "Callback probe failed",
         *       "description": "Request failure: Invalid response status code: 404 NOT_FOUND from GET https://webhook.site/dc25e7a0-60a3-4876-a560-b2b26113139c?validationToken=4fc54011-e773-4a3d-842d-3f223168d79a\n"
         *     } */
        "webhook-notifications.error_ApiError": {
            /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
             *      - `webhook.notFound` - Requested webhook subscription could not be found.
             *      - `callback.invalidUrl` - Given URL for receiving callbacks (such as webhooks or plugin integration "push" events) is either not a syntactically valid URL or it cannot be used as a callback receiver.
             *      - `callback.probeFailed` - Callback probe failed. Callback receiver either doesn't have the specified contract implemented or it is not accessible on network level.
             *
             *     Note that more detail about what _exactly_ happened is usually provided within the other properties of this
             *     object. Consult [Error codes](https://developer.productboard.com/reference/error-codes) if you can't find your error here.
             *      */
            code: string;
            /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
            title: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description An object containing references to the source of the error. */
            source?: {
                /** @description A value indicating which URI query parameter caused the error. */
                parameter?: string;
                /** @description JSON Pointer [RFC6901] to the associated entity in the request document */
                pointer?: string;
            };
        };
        "webhook-notifications.error_ApiErrors": {
            /** @description Errors that occurred. */
            errors: components["schemas"]["webhook-notifications.error_ApiError"][];
        };
        /**
         * @description Version of the notification body structure to be used when sending a notification.
         * @enum {integer}
         */
        WebhookPayloadVersion: 1;
        /** @description Where and how to send the notifications. */
        WebhookNotification: {
            /**
             * Format: uri
             * @description Target URL to send the webhook notifications to. The URL has to be publicly accessible, its scheme must be
             *     `https` to communicate over an encrypted channel, certificate has to be valid and it has to be signed by a
             *     public authority.
             *
             *     Hint: You can encode any additional information to the path or query parameters, they are fully under your control.
             *
             * @example https://example.destination.com/webhooks-handler
             */
            url: string;
            version: components["schemas"]["WebhookPayloadVersion"];
            headers?: components["schemas"]["HttpHeaders"];
        };
        WebhookSubscriptionRequest: {
            /**
             * @description Human-readable label for this webhook subscription, i.e. just anything that can help you to identify it easily.
             * @example Feature changes webhook
             */
            name: string;
            /** @description Event types to subscribe to. */
            events: components["schemas"]["WebhookEvent"][];
            notification: components["schemas"]["WebhookNotification"];
        };
        WebhookNotificationPayload: {
            id?: components["schemas"]["UUID"];
            eventType: components["schemas"]["WebhookEventType"];
            /** @description Links to the updated entity. */
            links: {
                /**
                 * Format: uri
                 * @description Link to the entity whose change triggered this webhook notification.
                 * @example https://api.productboard.com/features/00000000-0000-0000-0000-000000000000
                 */
                target: string;
            };
        };
    };
    responses: {
        /** @description `pageCursor` is invalid or expired
         *      */
        PageCursorInvalid: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description One of the following:
         *     + provided email address does not match an existing email address associated with the user identified by the given external ID
         *     + provided external ID does not match the existing external ID of the user identified by the given email address
         *     + the domain specified in `company.domain` does not correspond with the user's assigned company domain based on the external ID provided
         *     + `company.domain` doesn't match the external ID of the company
         *      */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description One of the following:
         *     + `source` already exists
         *     + `display_url` is not a properly formatted url
         *     + Combination of `customer_email`, `user.email` and `company.domain` is supplied. Only one of the provided fields is allowed at a time.
         *     + User does not exist and cannot be set as note owner
         *     + company does not exist and cannot be set on note (when `company.id` has been provided)
         *     + cannot set both company `id` and `domain` attributes
         *      */
        UnprocessableCreate: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description The client's request rate limit has been exceeded */
        RateLimited: {
            headers: {
                /**
                 * @description The number of seconds to wait until the rate limit will be lifted and the request should be retried
                 * @example 3600
                 */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Not found. */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiErrors"];
            };
        };
        /** @description Bad request. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiErrors"];
            };
        };
        /** @description One of the following:
         *     + Cannot update content of notes of this type (can only update simple notes content)
         *     + Cannot update note with snippets
         *     + Cannot set both user and company parameters
         *     + User does not exist and cannot be set as note owner
         *     + company does not exist and cannot be set on note (when `company.id` provided)
         *     + cannot set both company `id` and `domain` attributes
         *      */
        UnprocessableUpdate: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description Not found */
        "responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Not found */
                    error?: string;
                };
            };
        };
        /** @description Unprocessable entity */
        UnprocessableEntity: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FollowerCreateErrors"];
            };
        };
        /** @description Unprocessable Entity */
        ListNoteTagErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": {
                    /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
                     *     - `parameter.invalid` - The specified search parameter is not valid.
                     *     - `note.notFound` - Note with the requested ID cannot be found.
                     *      */
                    code: string;
                    /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
                    title: string;
                    /** @description A human-readable explanation specific to this occurrence of the problem. */
                    detail: string;
                };
            };
        };
        /** @description Unprocessable Entity */
        CreateNoteTagsErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": {
                    /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
                     *     - `parameter.invalid` - The specified search parameter is not valid.
                     *     - `note.notFound` - Note with the requested ID cannot be found.
                     *      */
                    code: string;
                    /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
                    title: string;
                    /** @description A human-readable explanation specific to this occurrence of the problem. */
                    detail: string;
                };
            };
        };
        /** @description Unprocessable Entity */
        DeleteNoteTagsErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": {
                    /** @description A unique, machine-readable and stable code that identifies this error. Consult the list below for possible values and their meanings:
                     *     - `parameter.invalid` - The specified search parameter is not valid.
                     *     - `note.notFound` - Note with the requested ID cannot be found.
                     *     - `tag.notFound` - Tag with the requested name cannot be found on the specified note.
                     *     - `tag.notOnNote` - Tag with the requested name is not associated with the specified note.
                     *      */
                    code: string;
                    /** @description A short, human-readable summary of the problem that doesn't change from occurrence to occurrence of the problem. */
                    title: string;
                    /** @description A human-readable explanation specific to this occurrence of the problem. */
                    detail: string;
                };
            };
        };
        /** @description Not found */
        "links.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["links.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "common.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "errors": [
                 *         {
                 *           "id": "ee3cf0df-59e7-47c6-9997-04326ebbad40",
                 *           "status": "404",
                 *           "code": "feedbackFormConfiguration.notFound",
                 *           "title": "Feedback form configuration not found",
                 *           "detail": "Feedback Form Configuration with ID '4edefba8-fd6f-4b0f-aa1c-2abf5dc0b0e9' could not be found. It either doesn't exist or you don't have permission to access it."
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["common.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "errors": [
                 *         {
                 *           "id": "ee3cf0df-59e7-47c6-9997-04326ebbad40",
                 *           "status": "400",
                 *           "code": "validation.request.body.schema.type",
                 *           "title": "Validation error",
                 *           "detail": "The parameter 'configuration' must be a hash."
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["common.error_ApiErrors"];
            };
        };
        /** @description Unprocessable Entity. */
        "responses-UnprocessableEntity": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        BadRequestWithCode: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiErrorsWithCode"];
            };
        };
        /** @description Unprocessable filter. */
        UnprocessableFilter: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrorsWithCode"];
            };
        };
        /** @description `recordId` duplicates existing record within origin
         *      */
        "responses-UnprocessableCreate": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description `recordId` duplicates existing record within origin
         *      */
        "responses-UnprocessableUpdate": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json; charset=utf-8": components["schemas"]["ApiErrors"];
            };
        };
        /** @description Not found. */
        "company-fields.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["company-fields.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "company-fields.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["company-fields.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "company-field-values.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["company-field-values.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "company-field-values.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["company-field-values.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "components-responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.model_ApiErrors"];
            };
        };
        /** @description Conflict. */
        "responses-Conflict": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.model_ApiErrors"];
            };
        };
        /** @description Not found. */
        "components-responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.model_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "hierarchy-entities.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["hierarchy-entities.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "hierarchy-entities.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["hierarchy-entities.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "features-links.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["features-links.error_ApiErrors"];
            };
        };
        /** @description The entity was not found. */
        "features-links.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["features-links.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "hierarchy-entity-custom-fields.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["hierarchy-entity-custom-fields.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "hierarchy-entity-custom-fields.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["hierarchy-entity-custom-fields.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "releases.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["releases.error_ApiErrors"];
            };
        };
        /** @description Forbidden. */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["releases.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "releases.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["releases.error_ApiErrors"];
            };
        };
        /** @description Conflict. */
        "releases.error_responses-Conflict": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["releases.error_ApiErrors"];
            };
        };
        /** @description Bad request. */
        "common.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.error_ApiErrors-2"];
            };
        };
        /** @description The entity was not found. */
        "common.error_responses-NotFound-2": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.error_ApiErrors-2"];
            };
        };
        /** @description Bad request. */
        "plugin-integrations.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["plugin-integrations.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "plugin-integrations.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["plugin-integrations.error_ApiErrors"];
            };
        };
        /** @description API schema validation error. */
        SchemaValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.model_ApiErrors-2"];
            };
        };
        /** @description Not found. */
        "common.api_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["common.model_ApiErrors-2"];
            };
        };
        /** @description Bad request. */
        "webhook-notifications.error_responses-BadRequest": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["webhook-notifications.error_ApiErrors"];
            };
        };
        /** @description Not found. */
        "webhook-notifications.error_responses-NotFound": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["webhook-notifications.error_ApiErrors"];
            };
        };
    };
    parameters: {
        /**
         * @description API version.
         * @example 1
         */
        Version: 1;
        /** @description Entity identifier. */
        Id: components["schemas"]["UUID"];
        /** @description Note identifier. */
        NoteId: components["schemas"]["UUID"];
        /** @description Entity identifier. */
        "params-Id": components["schemas"]["common.model_UUID"];
        /** @description Page limit. */
        PageLimit: number;
        /** @description Page offset. */
        PageOffset: number;
        /** @description Page cursor. */
        PageCursor: string;
        /** @description Entity identifier. */
        CompanyId: components["schemas"]["UUID"];
        /** @description Entity identifier. */
        CompanyCustomFieldId: components["schemas"]["UUID"];
        /** @description API version. */
        "parameters-Version": 1;
        /** @description Offset */
        "parameters-PageOffset": number;
        /** @description Page size limit */
        "parameters-PageLimit": number;
        /** @description Filter by whether entities are archived or not. */
        Archived: boolean;
        /** @description Filter by email of the user owning the entity. */
        OwnerEmail: string;
        /** @description Filter by id of the parent entity. */
        ParentId: string;
        /** @description Filter by status of the entity, where the status is selected by id. */
        StatusId: string;
        /** @description Filter by status of the entity, where the status is selected by name. */
        StatusName: string;
        /** @description Feature identifier. */
        FeatureId: components["schemas"]["UUID"];
    };
    requestBodies: {
        FollowerBulkCreateRequest: {
            content: {
                "application/json": {
                    /**
                     * @description Email of an existing user to add as a note follower
                     * @example user@example.com
                     */
                    email?: string;
                }[];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getNotes: {
        parameters: {
            query?: {
                /** @description If specified, the resource returns only notes created since given span of months (m), days (s), or hours (h). E.g. 6m | 10d | 24h | 1h
                 *
                 *     Cannot be combined with `createdFrom`, `createdTo`, `dateFrom`, or `dateTo`.
                 *      */
                last?: string;
                /**
                 * @deprecated
                 * @description Deprecated. Use "createdFrom" instead.
                 *
                 *     Cannot be combined with `last`.
                 *
                 */
                dateFrom?: components["schemas"]["Date"];
                /** @description If specified, the resource returns only notes created since given date
                 *
                 *     Cannot be combined with `last`.
                 *      */
                createdFrom?: components["schemas"]["Date"];
                /**
                 * @deprecated
                 * @description Deprecated. Use "createdTo" instead.
                 *
                 *     Cannot be combined with `last`.
                 *
                 */
                dateTo?: components["schemas"]["Date"];
                /** @description If specified, the resource returns only notes created before or equal to the given date
                 *
                 *     Cannot be combined with `last`.
                 *      */
                createdTo?: components["schemas"]["Date"];
                /** @description If specified, the resource returns only notes updated since given date */
                updatedFrom?: components["schemas"]["Date"];
                /** @description If specified, the resource returns only notes updated before or equal to the given date */
                updatedTo?: components["schemas"]["Date"];
                /** @description If specified, the resource returns only notes by fulltext search */
                term?: string;
                /** @description If specified, the resource returns only notes for specific feature ID or its descendants */
                featureId?: components["schemas"]["UUID"];
                /** @description If specified, the resource returns only notes for specific company ID */
                companyId?: components["schemas"]["UUID"];
                /** @description If specified, the resource returns only notes owned by a specific owner email */
                ownerEmail?: string;
                /** @description If specified, the resource returns only notes from a specific source origin. This is the unique string identifying the external system from which the data came. */
                source?: string;
                /** @description If specified, the resource returns only notes that have been assigned any of the tags in the array. Cannot be combined with allTags. */
                anyTag?: components["schemas"]["Tags"];
                /** @description If specified, the resource returns only notes that have been assigned all of the tags in the array. Cannot be combined with anyTag. */
                allTags?: components["schemas"]["Tags"];
                /** @description Page limit. */
                pageLimit?: number;
                /** @description Page cursor to get next page of results */
                pageCursor?: string;
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"][];
                        /** @description Use this pageCursor returned by search results to get next page of results.
                         *     GET /notes?pageCursor={pageCursor}
                         *     If there is no next page, this field is not present
                         *      */
                        pageCursor?: string;
                        /** @description Total number of notes that meet the specified parameters for the query. */
                        totalResults?: number;
                    };
                };
            };
            422: components["responses"]["PageCursorInvalid"];
        };
    };
    create_note: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
                /** @description A unique string identifying the external system through which the data came. */
                "Productboard-Partner-Id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Note to add */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NoteCreateRequest"];
            };
        };
        responses: {
            /** @description Note created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        links?: {
                            /**
                             * @description Note is accessible via this URL in the Productboard application
                             * @example https://space.productboard.com/inbox/notes/123456
                             */
                            html?: components["schemas"]["URL"];
                        };
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                    };
                };
            };
            409: components["responses"]["Conflict"];
            422: components["responses"]["UnprocessableCreate"];
            429: components["responses"]["RateLimited"];
        };
    };
    getNote: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ExpandedNote"];
                    };
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    deleteNote: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Note deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimited"];
        };
    };
    updateNote: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Note update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["NoteUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Note Updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        links?: {
                            /**
                             * @description Note is accessible via this URL in the Productboard application
                             * @example https://space.productboard.com/inbox/notes/123456
                             */
                            html?: components["schemas"]["URL"];
                        };
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["UnprocessableUpdate"];
            429: components["responses"]["RateLimited"];
        };
    };
    bulkAddNoteFollowers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note ID */
                noteId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["FollowerBulkCreateRequest"];
        responses: {
            /** @description Partial Success - Only some of the provided followers have been added
             *
             *     There were issues adding one or more followers
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FollowerBulkCreateSuccessResponse"] & components["schemas"]["FollowerBulkCreateErrorResponse"];
                };
            };
            /** @description Success - All of the provided followers have been added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FollowerBulkCreateSuccessResponse"];
                };
            };
            /** @description No users given */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FollowerBulkCreateErrorResponse"];
                };
            };
            404: components["responses"]["responses-NotFound"];
            /** @description No followers added */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FollowerBulkCreateErrorResponse"];
                };
            };
            429: components["responses"]["RateLimited"];
        };
    };
    removeNoteFollower: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note ID */
                noteId: components["schemas"]["UUID"];
                /** @description Email of user to unfollow from note */
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Follower removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["responses-NotFound"];
            422: components["responses"]["UnprocessableEntity"];
            429: components["responses"]["RateLimited"];
        };
    };
    listTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note ID */
                noteId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            tags: string[];
                        };
                    };
                };
            };
            422: components["responses"]["ListNoteTagErrorResponse"];
            429: components["responses"]["RateLimited"];
        };
    };
    createNoteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note ID */
                noteId: components["schemas"]["UUID"];
                /** @description Name of the created tag */
                tagName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, tag has been added to the note. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        links?: {
                            /**
                             * @description Note is accessible via this URL in the Productboard application
                             * @example https://space.productboard.com/inbox/notes/123456
                             */
                            html?: components["schemas"]["URL"];
                        };
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                    };
                };
            };
            422: components["responses"]["CreateNoteTagsErrorResponse"];
            429: components["responses"]["RateLimited"];
        };
    };
    deleteNoteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note ID */
                noteId: components["schemas"]["UUID"];
                /** @description Name of the created tag */
                tagName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, tag has been removed from the note. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["DeleteNoteTagsErrorResponse"];
            429: components["responses"]["RateLimited"];
        };
    };
    listLinks: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Note identifier. */
                noteId: components["parameters"]["NoteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["common.model_Features"];
                    };
                };
            };
            404: components["responses"]["links.error_responses-NotFound"];
        };
    };
    createLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Note identifier. */
                noteId: components["parameters"]["NoteId"];
                /** @description Entity ID (ID of product, component, feature, or subfeature). */
                entityId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Link created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Link already exists */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["links.error_responses-NotFound"];
        };
    };
    listFeedbackFormConfigurations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FeedbackFormConfiguration"][];
                        links: components["schemas"]["NextPageLinks"];
                    };
                };
            };
        };
    };
    getFeedbackFormConfiguration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["params-Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FeedbackFormConfiguration"];
                    };
                };
            };
            404: components["responses"]["common.error_responses-NotFound"];
        };
    };
    submitFeedbackForm: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    configuration: {
                        id: components["schemas"]["common.model_UUID"];
                    };
                    fields: {
                        id: components["schemas"]["common.model_UUID"];
                        /** @description Value can be null or not based on the configuration */
                        value: (components["schemas"]["NumberValue"] | components["schemas"]["TextValue"] | components["schemas"]["TextAreaValue"] | components["schemas"]["NoteTitleValue"] | components["schemas"]["CustomerValue"] | components["schemas"]["ImportanceValue"] | components["schemas"]["LinkToEntityValue"]) | null;
                    }[];
                };
            };
        };
        responses: {
            /** @description Success, the feedback form was submitted and a note was created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            id: components["schemas"]["common.model_UUID"];
                        };
                        links: {
                            html: components["schemas"]["common.model_URL"];
                        };
                    };
                };
            };
            400: components["responses"]["responses-BadRequest"];
            422: components["responses"]["responses-UnprocessableEntity"];
        };
    };
    getCompanies: {
        parameters: {
            query?: {
                /** @description Page limit. */
                pageLimit?: number;
                /** @description Page offset to get next page of results */
                pageOffset?: number;
                /** @description If specified, the resource returns only companies by search in name */
                term?: string;
                /** @description If specified as true, the resource returns only companies that have notes associated.
                 *
                 *     If specified as false, the resource returns only companies that do not have notes associated.
                 *      */
                hasNotes?: string;
                /** @description If specified, the resource returns only companies associated with the feature
                 *      */
                featureId?: string;
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["companies.model_Company"][];
                        links?: components["schemas"]["common.model_NextPageLinks"];
                    };
                };
            };
            400: components["responses"]["BadRequestWithCode"];
            422: components["responses"]["UnprocessableFilter"];
        };
    };
    createCompany: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
                /** @description A unique string identifying the external system through which the data came. */
                "Productboard-Partner-Id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Company to add */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompanyCreateRequest"];
            };
        };
        responses: {
            /** @description Company created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        links?: {
                            /**
                             * @description Company is accessible via this URL in the Productboard application
                             * @example https://space.productboard.com/companies/123456
                             */
                            html?: components["schemas"]["URL"];
                        };
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                    };
                };
            };
            422: components["responses"]["responses-UnprocessableCreate"];
            429: components["responses"]["RateLimited"];
        };
    };
    getCompany: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["companies.model_Company"];
                    };
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    deleteCompany: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the company has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
    updateCompany: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Company update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["CompanyUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Note Updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        links?: {
                            /**
                             * @description Company is accessible via this URL in the Productboard application
                             * @example https://space.productboard.com/companies/123456
                             */
                            html?: components["schemas"]["URL"];
                        };
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["responses-UnprocessableUpdate"];
            429: components["responses"]["RateLimited"];
        };
    };
    listCompanyFields: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CompanyField"][];
                        links: components["schemas"]["common.model_NextPageLinks"];
                    };
                };
            };
            404: components["responses"]["company-fields.error_responses-NotFound"];
        };
    };
    createCompanyField: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Company field creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: {
                        /**
                         * @description Company field name
                         * @example Custom name
                         */
                        name?: string;
                        /**
                         * @description Company field type
                         * @example text
                         * @enum {string}
                         */
                        type?: "text" | "number";
                    };
                };
            };
        };
        responses: {
            /** @description Success, the CompanyField has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLink"];
                    };
                };
            };
            400: components["responses"]["company-fields.error_responses-BadRequest"];
        };
    };
    getCompanyField: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CompanyField"];
                    };
                };
            };
            404: components["responses"]["company-fields.error_responses-NotFound"];
        };
    };
    deleteCompanyField: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the Company Field has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["company-fields.error_responses-NotFound"];
        };
    };
    updateCompanyField: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description CompanyField update request, fields that are not specified will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: {
                        /**
                         * @description New company field name
                         * @example Custom name
                         */
                        name?: string;
                        /**
                         * @description New company field type
                         * @example text
                         * @enum {string}
                         */
                        type?: "text" | "number";
                    };
                };
            };
        };
        responses: {
            /** @description Success, the company field has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLink"];
                    };
                };
            };
            400: components["responses"]["company-fields.error_responses-BadRequest"];
            404: components["responses"]["company-fields.error_responses-NotFound"];
        };
    };
    getCompanyFieldValue: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                companyId: components["parameters"]["CompanyId"];
                /** @description Entity identifier. */
                companyCustomFieldId: components["parameters"]["CompanyCustomFieldId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CompanyFieldValue"];
                        links?: components["schemas"]["SelfLink"];
                    };
                };
            };
            404: components["responses"]["company-field-values.error_responses-NotFound"];
        };
    };
    setCompanyFieldValue: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                companyId: components["parameters"]["CompanyId"];
                /** @description Entity identifier. */
                companyCustomFieldId: components["parameters"]["CompanyCustomFieldId"];
            };
            cookie?: never;
        };
        /** @description Custom field value update request. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompanyCustomFieldValueUpdateRequest"];
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        links?: components["schemas"]["SelfLink"];
                    };
                };
            };
            400: components["responses"]["company-field-values.error_responses-BadRequest"];
            404: components["responses"]["company-field-values.error_responses-NotFound"];
        };
    };
    deleteCompanyFieldValue: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                companyId: components["parameters"]["CompanyId"];
                /** @description Entity identifier. */
                companyCustomFieldId: components["parameters"]["CompanyCustomFieldId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the company custom field value has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["company-field-values.error_responses-NotFound"];
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header: {
                /** @description API version. */
                "X-Version": components["parameters"]["parameters-Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["schemas-User"][];
                        links?: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["components-responses-BadRequest"];
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header: {
                /** @description API version. */
                "X-Version": components["parameters"]["parameters-Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description User creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["UserRequestProperties"];
                };
            };
        };
        responses: {
            /** @description Success, the User has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["common.model_SelfLink"];
                    };
                };
            };
            400: components["responses"]["components-responses-BadRequest"];
            409: components["responses"]["responses-Conflict"];
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header: {
                /** @description API version. */
                "X-Version": components["parameters"]["parameters-Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["schemas-User"];
                    };
                };
            };
            400: components["responses"]["components-responses-BadRequest"];
            404: components["responses"]["components-responses-NotFound"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header: {
                /** @description API version. */
                "X-Version": components["parameters"]["parameters-Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the User has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["components-responses-NotFound"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header: {
                /** @description API version. */
                "X-Version": components["parameters"]["parameters-Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description User update request, fields that are not specified will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["UserUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the user has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["schemas-User"];
                    };
                };
            };
            400: components["responses"]["components-responses-BadRequest"];
            404: components["responses"]["components-responses-NotFound"];
            409: components["responses"]["responses-Conflict"];
        };
    };
    getFeatures: {
        parameters: {
            query?: {
                /** @description If specified, the resource returns only features in status with given ID. If both `status.id` and `status.name` are specified, only features that fulfill both criteria are returned. */
                "status.id"?: components["schemas"]["UUID"];
                /** @description If specified, the resource returns only features in status with given name. If both `status.id` and `status.name` are specified, only features that fulfill both criteria are returned. */
                "status.name"?: string;
                /** @description If specified, the resource returns only features that have a parent with the given ID. */
                "parent.id"?: components["schemas"]["UUID"];
                /** @description If specified, the resource returns only features with `archived` flag matching provided value. */
                archived?: boolean;
                /** @description If specified, the resource returns only features owned by a `Member` with matching email. */
                "owner.email"?: string;
                /** @description If specified, the resource returns only features linked to a note with given ID. */
                "note.id"?: components["schemas"]["UUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["features.model_Feature"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    createFeature: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Feature creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["FeatureCreationRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the feature has been created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["features.model_Feature"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    getFeature: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["features.model_Feature"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateFeatureDeprecated: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Feature update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["FeatureUpdateRequestDeprecated"];
                };
            };
        };
        responses: {
            /** @description Success, the feature has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["features.model_Feature"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    deleteFeature: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the feature has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateFeature: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Feature update request, fields that are not specified will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["FeatureUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the feature has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["features.model_Feature"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    listLinksToInitiatives: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["InitiativeLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["features-links.error_responses-BadRequest"];
            404: components["responses"]["features-links.error_responses-NotFound"];
        };
    };
    createInitiativeLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                initiativeId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["features-links.error_responses-BadRequest"];
        };
    };
    deleteInitiativeLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                initiativeId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["features-links.error_responses-NotFound"];
        };
    };
    listLinksToObjectives: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["InitiativeLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["features-links.error_responses-BadRequest"];
            404: components["responses"]["features-links.error_responses-NotFound"];
        };
    };
    createObjectiveLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                objectiveId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["features-links.error_responses-BadRequest"];
        };
    };
    deleteObjectiveLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                objectiveId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["features-links.error_responses-NotFound"];
        };
    };
    getComponents: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Component"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    createComponent: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Component creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ComponentCreationRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the component has been created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Component"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    getComponent: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Component"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateComponentDeprecated: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Component update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ComponentUpdateRequestDeprecated"];
                };
            };
        };
        responses: {
            /** @description Success, the component has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Component"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateComponent: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Component update request, fields not specified in the request will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ComponentUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the component has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Component"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    getProducts: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Product"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    getProduct: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Product"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateProductDeprecated: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Product update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ProductUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the product has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Product"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    updateProduct: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Product update request, fields with `null` value will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ProductUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the product has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Product"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entities.error_responses-NotFound"];
        };
    };
    getFeatureStatuses: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FeatureStatus"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entities.error_responses-BadRequest"];
        };
    };
    getCustomFields: {
        parameters: {
            query: {
                /** @description Custom field types to include in the response. Mandatory to allow the addition of more types in the future without breaking existing clients. */
                type: ("text" | "custom-description" | "number" | "dropdown" | "multi-dropdown" | "member")[];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": "51b3f196-9182-4cbf-9602-55f48e3a6869",
                     *           "type": "text",
                     *           "name": "My Text Field",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields/51b3f196-9182-4cbf-9602-55f48e3a6869"
                     *           }
                     *         },
                     *         {
                     *           "id": "51b3f196-9182-4cbf-9602-55f48e3a6869",
                     *           "type": "custom-description",
                     *           "name": "My Description Field",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields/a88606ce-ed9c-4042-877d-46713dd9f5fb"
                     *           }
                     *         },
                     *         {
                     *           "id": "fdd377b4-8d72-11ec-b909-0242ac120002",
                     *           "type": "number",
                     *           "name": "My Number Field",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields/fdd377b4-8d72-11ec-b909-0242ac120002"
                     *           }
                     *         },
                     *         {
                     *           "id": "abb33cf9-55ec-4001-afab-c3ef4814b2b6",
                     *           "type": "dropdown",
                     *           "name": "My Dropdown Field",
                     *           "options": [
                     *             {
                     *               "id": "a9ec4e8d-785e-4f46-af5e-51b5e1139340",
                     *               "label": "Good"
                     *             },
                     *             {
                     *               "id": "cfc9afa6-a5fe-11ec-b909-0242ac120002",
                     *               "label": "Bad"
                     *             },
                     *             {
                     *               "id": "d9c4ed40-a5fe-11ec-b909-0242ac120002",
                     *               "label": "Ugly"
                     *             }
                     *           ],
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields/abb33cf9-55ec-4001-afab-c3ef4814b2b6"
                     *           }
                     *         },
                     *         {
                     *           "id": "a46d2242-e9a6-472f-8d71-c990839621df",
                     *           "type": "member",
                     *           "name": "My Project Member Field",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields/a46d2242-e9a6-472f-8d71-c990839621df"
                     *           }
                     *         }
                     *       ],
                     *       "links": {
                     *         "next": "https://api.productboard.com/hierarchy-entities/custom-fields?pageLimit=100&pageOffset=100"
                     *       }
                     *     } */
                    "application/json": {
                        data: components["schemas"]["CustomField"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
        };
    };
    getCustomFieldsValues: {
        parameters: {
            query?: {
                /** @description Custom field types to include in the response. Mandatory if `customField.id` is not specified. */
                type?: ("text" | "custom-description" | "number" | "dropdown" | "multi-dropdown" | "member")[];
                /** @description Show only custom field values for given custom field. Mandatory if `type` is not specified. */
                "customField.id"?: components["schemas"]["ReadOnlyUUID"];
                /** @description Show only custom field values for given hierarchy entity. */
                "hierarchyEntity.id"?: components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "customField": {
                     *             "id": "abb33cf9-55ec-4001-afab-c3ef4814b2b6"
                     *           },
                     *           "hierarchyEntity": {
                     *             "id": "ff356c45-b6d9-4d97-85eb-2d6fe51ac51f",
                     *             "type": "feature"
                     *           },
                     *           "type": "text",
                     *           "value": "Text value",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=abb33cf9-55ec-4001-afab-c3ef4814b2b6&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f"
                     *           }
                     *         },
                     *         {
                     *           "customField": {
                     *             "id": "a88606ce-ed9c-4042-877d-46713dd9f5fb"
                     *           },
                     *           "hierarchyEntity": {
                     *             "id": "ff356c45-b6d9-4d97-85eb-2d6fe51ac51f",
                     *             "type": "feature"
                     *           },
                     *           "type": "custom-description",
                     *           "value": "<h1>Acceptance criteria</h1><p>As a user, I want to be able to see the list of all my tasks.</p>",
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=a88606ce-ed9c-4042-877d-46713dd9f5fb&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f"
                     *           }
                     *         },
                     *         {
                     *           "customField": {
                     *             "id": "fdd377b4-8d72-11ec-b909-0242ac120002"
                     *           },
                     *           "hierarchyEntity": {
                     *             "id": "ff356c45-b6d9-4d97-85eb-2d6fe51ac51f",
                     *             "type": "component"
                     *           },
                     *           "type": "number",
                     *           "value": 0.1,
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=fdd377b4-8d72-11ec-b909-0242ac120002&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f"
                     *           }
                     *         },
                     *         {
                     *           "customField": {
                     *             "id": "abb33cf9-55ec-4001-afab-c3ef4814b2b6"
                     *           },
                     *           "hierarchyEntity": {
                     *             "id": "ff356c45-b6d9-4d97-85eb-2d6fe51ac51f",
                     *             "type": "feature"
                     *           },
                     *           "type": "dropdown",
                     *           "value": {
                     *             "id": "a9ec4e8d-785e-4f46-af5e-51b5e1139340",
                     *             "label": "Good"
                     *           },
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=abb33cf9-55ec-4001-afab-c3ef4814b2b6&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f"
                     *           }
                     *         },
                     *         {
                     *           "customField": {
                     *             "id": "b6d9671d-6ee0-4e1f-afe2-b0b20d838951"
                     *           },
                     *           "hierarchyEntity": {
                     *             "id": "ff356c45-b6d9-4d97-85eb-2d6fe51ac51f",
                     *             "type": "feature"
                     *           },
                     *           "type": "member",
                     *           "value": {
                     *             "email": "member.email@example.com"
                     *           },
                     *           "links": {
                     *             "self": "https://api.productboard.com/hierarchy-entities/custom-fields-values/value?customField.id=b6d9671d-6ee0-4e1f-afe2-b0b20d838951&hierarchyEntity.id=ff356c45-b6d9-4d97-85eb-2d6fe51ac51f"
                     *           }
                     *         }
                     *       ],
                     *       "links": {
                     *         "next": "https://api.productboard.com/hierarchy-entities/custom-fields-values?pageLimit=100&pageCursor=IqEXaE8uSamv9bsBBSmyEbTduQ-Js0RjocWsHU4Hlag&type=text,number,member,dropdown"
                     *       }
                     *     } */
                    "application/json": {
                        data: components["schemas"]["CustomFieldValue"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
        };
    };
    getCustomField: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CustomField"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entity-custom-fields.error_responses-NotFound"];
        };
    };
    getCustomFieldValue: {
        parameters: {
            query: {
                /** @description ID of the custom field to be set */
                "customField.id": components["schemas"]["ReadOnlyUUID"];
                /** @description ID of the Hierarchy Entity */
                "hierarchyEntity.id": components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CustomFieldValue"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entity-custom-fields.error_responses-NotFound"];
        };
    };
    setCustomFieldValue: {
        parameters: {
            query: {
                /** @description ID of the custom field to be set */
                "customField.id": components["schemas"]["ReadOnlyUUID"];
                /** @description ID of the Hierarchy Entity */
                "hierarchyEntity.id": components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Custom field value update request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["CustomFieldValueUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CustomFieldValue"];
                    };
                };
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entity-custom-fields.error_responses-NotFound"];
        };
    };
    deleteCustomFieldValue: {
        parameters: {
            query: {
                /** @description ID of the custom field */
                "customField.id": components["schemas"]["ReadOnlyUUID"];
                /** @description ID of the Hierarchy Entity */
                "hierarchyEntity.id": components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the custom field value has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["hierarchy-entity-custom-fields.error_responses-BadRequest"];
            404: components["responses"]["hierarchy-entity-custom-fields.error_responses-NotFound"];
        };
    };
    listReleaseGroups: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ReleaseGroup"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
        };
    };
    createReleaseGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Release group creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ReleaseGroupCreationRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the release group has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ReleaseGroup"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            403: components["responses"]["Forbidden"];
        };
    };
    getReleaseGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ReleaseGroup"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    deleteReleaseGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the release group has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    updateReleaseGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Release group update request, fields not specified in the request will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ReleaseGroupUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the release group has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ReleaseGroup"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    listReleases: {
        parameters: {
            query?: {
                "releaseGroup.id"?: string;
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Release"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
        };
    };
    createRelease: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Release creation request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ReleaseCreationRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the release has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Release"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            409: components["responses"]["releases.error_responses-Conflict"];
        };
    };
    getRelease: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Release"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    deleteRelease: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the release has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    updateRelease: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Release update request, fields not specified in the request will remain unchanged. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ReleaseUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the release has been updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Release"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
            409: components["responses"]["releases.error_responses-Conflict"];
        };
    };
    listFeatureReleaseAssignments: {
        parameters: {
            query?: {
                "feature.id"?: string;
                "release.id"?: string;
                "release.state"?: "upcoming" | "in-progress" | "completed";
                /** @description Filter assignments which release end date is after this date (inclusive) */
                "release.timeframe.endDate.from"?: components["schemas"]["common.model_Date"];
                /** @description Filter assignments which release end date is before this date (inclusive) */
                "release.timeframe.endDate.to"?: components["schemas"]["common.model_Date"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "feature": {
                     *             "id": "a2add02f-d7e0-4490-b380-7edd53cb1b1b",
                     *             "links": {
                     *               "self": "https://api.productboard.com/features/a2add02f-d7e0-4490-b380-7edd53cb1b1b"
                     *             }
                     *           },
                     *           "release": {
                     *             "id": "a848517e-3aa6-4505-9a08-c46d90ae3713",
                     *             "links": {
                     *               "self": "https://api.productboard.com/releases/a848517e-3aa6-4505-9a08-c46d90ae3713"
                     *             }
                     *           },
                     *           "assigned": true,
                     *           "links": {
                     *             "self": "https://api.productboard.info/feature-release-assignments/assignment?feature.id=a2add02f-d7e0-4490-b380-7edd53cb1b1b&release.id=a848517e-3aa6-4505-9a08-c46d90ae3713"
                     *           }
                     *         }
                     *       ],
                     *       "links": {
                     *         "next": "https://api.productboard.info/feature-release-assignments?pageLimit=100&pageCursor=3ZPJ0Nf_QSe6AG57wbDTfvfqUqSsZEofrRr2lSzaV8k"
                     *       }
                     *     } */
                    "application/json": {
                        data: components["schemas"]["FeatureReleaseAssignment"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
        };
    };
    getFeatureReleaseAssignment: {
        parameters: {
            query: {
                /** @description ID of the release */
                "release.id": components["schemas"]["ReadOnlyUUID"];
                /** @description ID of the feature */
                "feature.id": components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FeatureReleaseAssignment"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    updateFeatureReleaseAssignment: {
        parameters: {
            query: {
                /** @description ID of the release */
                "release.id": components["schemas"]["ReadOnlyUUID"];
                /** @description ID of the feature */
                "feature.id": components["schemas"]["ReadOnlyUUID"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Update feature release assignment request. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["FeatureReleaseAssignmentUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the feature release assignment was updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FeatureReleaseAssignment"];
                    };
                };
            };
            400: components["responses"]["releases.error_responses-BadRequest"];
            404: components["responses"]["releases.error_responses-NotFound"];
        };
    };
    getObjectives: {
        parameters: {
            query?: {
                /** @description Filter by whether entities are archived or not. */
                archived?: components["parameters"]["Archived"];
                /** @description Filter by email of the user owning the entity. */
                "owner.email"?: components["parameters"]["OwnerEmail"];
                /** @description Filter by id of the parent entity. */
                "parent.id"?: components["parameters"]["ParentId"];
                /** @description Filter by status of the entity, where the status is selected by id. */
                "status.id"?: components["parameters"]["StatusId"];
                /** @description Filter by status of the entity, where the status is selected by name. */
                "status.name"?: components["parameters"]["StatusName"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Objective"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    createObjective: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ObjectiveCreateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the objective. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    getObjective: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Objective"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    deleteObjective: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the objective. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    updateObjective: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["ObjectiveUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the objective. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    listLinksObjectiveToFeatures: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["EntityLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    listLinksObjectiveToInitiatives: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["EntityLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    createObjectiveToInitiativeLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                initiativeId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    deleteObjectiveToInitiativeLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                initiativeId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    createObjectiveToFeatureLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                featureId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    deleteObjectiveToFeatureLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                featureId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    getKeyResults: {
        parameters: {
            query?: {
                /** @description Filter by id of the parent entity. */
                "parent.id"?: components["parameters"]["ParentId"];
                /** @description Filter by status of the entity, where the status is selected by id. */
                "status.id"?: components["parameters"]["StatusId"];
                /** @description Filter by status of the entity, where the status is selected by name. */
                "status.name"?: components["parameters"]["StatusName"];
                /** @description Filter by whether entities are archived or not. */
                archived?: components["parameters"]["Archived"];
                /** @description Filter by email of the user owning the entity. */
                "owner.email"?: components["parameters"]["OwnerEmail"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["KeyResult"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    createKeyResult: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["KeyResultCreationRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: components["schemas"]["UUID"];
                        };
                        links: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    getKeyResult: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["KeyResult"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    deleteKeyResult: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains no content. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    updateKeyResult: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["KeyResultUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: components["schemas"]["UUID"];
                        };
                        links: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    getInitiatives: {
        parameters: {
            query?: {
                /** @description Filter by whether entities are archived or not. */
                archived?: components["parameters"]["Archived"];
                /** @description Filter by email of the user owning the entity. */
                "owner.email"?: components["parameters"]["OwnerEmail"];
                /** @description Filter by status of the entity, where the status is selected by id. */
                "status.id"?: components["parameters"]["StatusId"];
                /** @description Filter by status of the entity, where the status is selected by name. */
                "status.name"?: components["parameters"]["StatusName"];
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Initiative"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    createInitiative: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["InitiativeCreateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the initiative. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    getInitiative: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Initiative"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    deleteInitiative: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the initiative. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    updateInitiative: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["InitiativeUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the initiative. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: components["schemas"]["UUID"];
                        };
                        links?: components["schemas"]["SelfLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    listLinksInitiativeToObjectives: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["EntityLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    listLinksInitiativeToFeatures: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["EntityLink"][];
                        links: components["schemas"]["PageLinks"];
                    };
                };
            };
            400: components["responses"]["common.error_responses-BadRequest"];
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    createInitiativeToObjectiveLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                objectiveId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    deleteInitiativeToObjectiveLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                objectiveId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    createInitiativeToFeatureLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                featureId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created the link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["common.error_responses-BadRequest"];
        };
    };
    deleteInitiativeToFeatureLink: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                featureId: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the link. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["common.error_responses-NotFound-2"];
        };
    };
    getPluginIntegrations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationResponse"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
        };
    };
    postPluginIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Definition of plugin integration. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["PluginIntegrationCreate"];
                };
            };
        };
        responses: {
            /** @description The Plugin Integration has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
        };
    };
    getPluginIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    putPluginIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Definition of plugin integration. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["PluginIntegrationUpdate"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    deletePluginIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The integration has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    patchPluginIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        /** @description Definition of plugin integration. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["PluginIntegrationUpdate"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    getPluginIntegrationConnections: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationConnectionResponse"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
        };
    };
    getPluginIntegrationConnection: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                /** @description Feature identifier. */
                featureId: components["parameters"]["FeatureId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationConnectionResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    putPluginIntegrationConnection: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                /** @description Feature identifier. */
                featureId: components["parameters"]["FeatureId"];
            };
            cookie?: never;
        };
        /** @description Definition of a plugin integration connection. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["PluginIntegrationConnection"];
                };
            };
        };
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PluginIntegrationConnectionResponse"];
                    };
                };
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
        };
    };
    deletePluginIntegrationConnection: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                /** @description Feature identifier. */
                featureId: components["parameters"]["FeatureId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the connection has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["plugin-integrations.error_responses-BadRequest"];
            404: components["responses"]["plugin-integrations.error_responses-NotFound"];
        };
    };
    getJiraIntegration: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JiraIntegrationResponse"];
                    };
                };
            };
            400: components["responses"]["SchemaValidationError"];
            404: components["responses"]["common.api_responses-NotFound"];
        };
    };
    getJiraIntegrations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JiraIntegrationResponse"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["SchemaValidationError"];
        };
    };
    getJiraIntegrationConnection: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
                /** @description Feature identifier. */
                featureId: components["parameters"]["FeatureId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JiraIntegrationConnectionResponse"];
                    };
                };
            };
            400: components["responses"]["SchemaValidationError"];
            404: components["responses"]["common.api_responses-NotFound"];
        };
    };
    getJiraIntegrationConnections: {
        parameters: {
            query?: {
                /** @description If specified, the resource returns only connection for given Jira issue (if any). */
                "connection.issueKey"?: string;
                /** @description If specified, the resource returns only connection for given Jira issue (if any). */
                "connection.issueId"?: string;
            };
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JiraIntegrationConnectionResponse"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["SchemaValidationError"];
        };
    };
    getWebhooks: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["WebhookSubscription"][];
                        links: components["schemas"]["common.model_NextPageLinks-2"];
                    };
                };
            };
            400: components["responses"]["webhook-notifications.error_responses-BadRequest"];
        };
    };
    postWebhook: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Definition of webhook subscription. */
        requestBody: {
            content: {
                "application/json": {
                    data: components["schemas"]["WebhookSubscriptionRequest"];
                };
            };
        };
        responses: {
            /** @description The webhook subscription has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["WebhookSubscription"];
                    };
                };
            };
            400: components["responses"]["webhook-notifications.error_responses-BadRequest"];
        };
    };
    getWebhook: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, the response contains valid data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["WebhookSubscription"];
                    };
                };
            };
            400: components["responses"]["webhook-notifications.error_responses-BadRequest"];
            404: components["responses"]["webhook-notifications.error_responses-NotFound"];
        };
    };
    deleteWebhook: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description API version.
                 * @example 1
                 */
                "X-Version": components["parameters"]["Version"];
            };
            path: {
                /** @description Entity identifier. */
                id: components["parameters"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The subscription has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["webhook-notifications.error_responses-BadRequest"];
            404: components["responses"]["webhook-notifications.error_responses-NotFound"];
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
